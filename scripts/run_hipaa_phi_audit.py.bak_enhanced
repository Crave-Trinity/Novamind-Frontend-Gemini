#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HIPAA Compliance PHI Audit Script.

This script scans the codebase for potential Protected Health Information (PHI)
that may have been accidentally included in code, comments, or test files.
It generates comprehensive reports and can be run as part of CI/CD pipelines
to ensure HIPAA compliance.
"""

import os
import re
import sys
import json
import argparse
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Set, Tuple, Any, Optional, Union

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("phi_audit")

# Try to import our PHI detection utilities, otherwise use a simplified version
try:
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
    from app.core.utils.validation import PHIDetector
except ImportError:
    logger.warning("Could not import PHIDetector from app.core.utils.validation")
    logger.warning("Using simplified PHI detection patterns")
    
    class PHIMatch:
        """Simple PHI match class for standalone usage."""
        def __init__(self, phi_type: str, value: str, position: int):
            self.phi_type = phi_type
            self.value = value
            self.position = position
    
class PHIDetector:
    """PHI Detection class for identifying protected health information."""

    # Enhanced PHI patterns for better detection
    PHI_PATTERNS = [
        # SSN pattern - explicit format XXX-XX-XXXX
        r'\b\d{3}-\d{2}-\d{4}\b',
        # SSN without dashes
        r'\b\d{9}\b',
        # Email addresses
        r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
        # Phone numbers
        r'\b\(\d{3}\)\s*\d{3}-\d{4}\b',
        r'\b\d{3}-\d{3}-\d{4}\b',
        # Credit card numbers
        r'\b(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11})\b',
        # Names (common pattern in code)
        r'\b(?:Mr\.|Mrs\.|Ms\.|Dr\.)\s[A-Z][a-z]+ [A-Z][a-z]+\b',
        # Patient identifiers
        r'\bPATIENT[_-]?ID[_-]?\d+\b',
        r'\bPT[_-]?ID[_-]?\d+\b',
        # Medical record numbers
        r'\bMRN[_-]?\d+\b',
        r'\bMEDICAL[_-]?RECORD[_-]?\d+\b',
    ]

    def __init__(self):
        """Initialize the PHI detector with detection patterns."""
        pass

    def detect_phi(self, content: str) -> list:
        """
        Detect PHI patterns in the content.
        
        Args:
            content: The text content to check for PHI
            
        Returns:
            List of PHI matches found
        """
        import re
        matches = []
        
        for pattern in self.PHI_PATTERNS:
            pattern_matches = re.finditer(pattern, content)
            for match in pattern_matches:
                phi_value = match.group(0)
                phi_type = self._determine_phi_type(pattern)
                position = match.start()
                matches.append(PHIMatch(phi_type, phi_value, position))
        
        return matches

    def _determine_phi_type(self, pattern: str) -> str:
        """Determine the type of PHI based on the pattern."""
        if "\d{3}-\d{2}-\d{4}" in pattern:
            return "SSN"
        elif "\d{9}" in pattern:
            return "SSN (no dashes)"
        elif "@" in pattern:
            return "Email"
        elif "\d{3}-\d{3}-\d{4}" in pattern or "\(\d{3}\)" in pattern:
            return "Phone"
        elif "4[0-9]{12}" in pattern or "5[1-5][0-9]{14}" in pattern:
            return "Credit Card"
        elif "Mr\.|Mrs\.|Ms\.|Dr\." in pattern:
            return "Name"
        elif "PATIENT" in pattern or "PT" in pattern:
            return "Patient ID"
        elif "MRN" in pattern or "MEDICAL" in pattern:
            return "Medical Record Number"
        else:
            return "Unknown PHI"

