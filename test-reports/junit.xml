<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="776" failures="0" errors="0" time="6.604368292">
    <testsuite name="src/pages/Dashboard.test.tsx" timestamp="2025-04-07T19:56:42.114Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.144048167">
        <testcase classname="src/pages/Dashboard.test.tsx" name="Dashboard &gt; renders key dashboard elements with neural precision" time="0.028729125">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/pages/Dashboard.test.tsx" name="Dashboard &gt; navigates when &apos;View Brain&apos; is clicked" time="0.113111">
            <system-out>
[ThemeProvider] applyTheme called with: light

[AuditLogClient] PATIENT_RECORD_VIEW: {
  timestamp: [35m2025-04-07T19:56:33.213Z[39m,
  eventType: [32m&apos;PATIENT_RECORD_VIEW&apos;[39m,
  action: [32m&apos;navigate_to_brain_visualization&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  resourceId: [32m&apos;demo&apos;[39m,
  resourceType: [32m&apos;patient&apos;[39m,
  details: [32m&apos;Navigated to brain visualization from dashboard&apos;[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/App.test.tsx" timestamp="2025-04-07T19:56:42.115Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="2" time="0">
        <testcase classname="src/presentation/App.test.tsx" name="index &gt; renders with neural precision" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/presentation/App.test.tsx" name="index &gt; responds to user interaction with quantum precision" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/test/absolute-minimal.spec.tsx" timestamp="2025-04-07T19:56:42.115Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.017796">
        <testcase classname="src/test/absolute-minimal.spec.tsx" name="Absolute Minimal Test &gt; renders a minimal component with quantum precision" time="0.01591025">
        </testcase>
        <testcase classname="src/test/absolute-minimal.spec.tsx" name="Absolute Minimal Test &gt; performs basic assertions with clinical precision" time="0.001048042">
        </testcase>
    </testsuite>
    <testsuite name="src/test/minimal-brain-container.spec.tsx" timestamp="2025-04-07T19:56:42.115Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.022347083">
        <testcase classname="src/test/minimal-brain-container.spec.tsx" name="Minimal Brain Container Test &gt; should render the mocked component with neural precision" time="0.006940375">
            <system-out>
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;div[39m
      [33mdata-testid[39m=[32m&quot;brain-model-container&quot;[39m
    [36m&gt;[39m
      [36m&lt;div[39m
        [33mdata-testid[39m=[32m&quot;brain-model&quot;[39m
      [36m&gt;[39m
        [0mNeural Visualization[0m
      [36m&lt;/div&gt;[39m
      [36m&lt;div[39m
        [33mdata-testid[39m=[32m&quot;patient-id&quot;[39m
      [36m&gt;[39m
        [0mTEST-PATIENT-001[0m
      [36m&lt;/div&gt;[39m
      [36m&lt;div[39m
        [33mdata-testid[39m=[32m&quot;neural-controls&quot;[39m
      [36m&gt;[39m
        [0mNeural Controls[0m
      [36m&lt;/div&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m

            </system-out>
        </testcase>
        <testcase classname="src/test/minimal-brain-container.spec.tsx" name="Minimal Brain Container Test &gt; should have the correct neural structure" time="0.014610375">
        </testcase>
    </testsuite>
    <testsuite name="src/test/minimal-brain-test.spec.ts" timestamp="2025-04-07T19:56:42.116Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.002236625">
        <testcase classname="src/test/minimal-brain-test.spec.ts" name="Minimal Brain Test &gt; should pass a simple assertion" time="0.000190208">
        </testcase>
        <testcase classname="src/test/minimal-brain-test.spec.ts" name="Minimal Brain Test &gt; should handle basic math" time="0.000136375">
        </testcase>
        <testcase classname="src/test/minimal-brain-test.spec.ts" name="Minimal Brain Test &gt; should handle basic string operations" time="0.000612375">
        </testcase>
    </testsuite>
    <testsuite name="src/test/minimal-ts.test.ts" timestamp="2025-04-07T19:56:42.117Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.001902334">
        <testcase classname="src/test/minimal-ts.test.ts" name="Basic TypeScript Test &gt; confirms that basic assertions work" time="0.001041916">
        </testcase>
    </testsuite>
    <testsuite name="src/test/minimal.test.ts" timestamp="2025-04-07T19:56:42.117Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.002997542">
        <testcase classname="src/test/minimal.test.ts" name="Minimal TypeScript Test &gt; verifies basic arithmetic calculations" time="0.000379459">
        </testcase>
        <testcase classname="src/test/minimal.test.ts" name="Minimal TypeScript Test &gt; verifies that TextEncoder works correctly" time="0.001469708">
        </testcase>
    </testsuite>
    <testsuite name="src/test/neural-standalone.spec.tsx" timestamp="2025-04-07T19:56:42.118Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.022782375">
        <testcase classname="src/test/neural-standalone.spec.tsx" name="Neural Standalone Test &gt; renders the neural container with quantum precision" time="0.0033905">
        </testcase>
        <testcase classname="src/test/neural-standalone.spec.tsx" name="Neural Standalone Test &gt; handles patient ID with clinical precision" time="0.018282959">
        </testcase>
    </testsuite>
    <testsuite name="src/test/sanity.test.ts" timestamp="2025-04-07T19:56:42.118Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.001815416">
        <testcase classname="src/test/sanity.test.ts" name="Sanity Check &gt; should pass a basic assertion" time="0.000295458">
        </testcase>
        <testcase classname="src/test/sanity.test.ts" name="Sanity Check &gt; should confirm imports work" time="0.000575041">
        </testcase>
    </testsuite>
    <testsuite name="src/test/standalone-brain-test.spec.tsx" timestamp="2025-04-07T19:56:42.118Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.028818625">
        <testcase classname="src/test/standalone-brain-test.spec.tsx" name="Standalone Brain Container Test &gt; renders the standalone container with quantum precision" time="0.02576725">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/test/tailwind-example.unified.test.tsx" timestamp="2025-04-07T19:56:42.118Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.033339125">
        <testcase classname="src/test/tailwind-example.unified.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; renders correctly in light mode" time="0.010169292">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/tailwind-example.unified.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; components have proper dark mode classes" time="0.003341125">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/tailwind-example.unified.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; can toggle dark mode during test execution" time="0.017613625">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/test/tailwind-testing-example.test.tsx" timestamp="2025-04-07T19:56:42.119Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="0" time="0.037292333">
        <testcase classname="src/test/tailwind-testing-example.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; renders component with correct light mode classes" time="0.00374025">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/tailwind-testing-example.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; renders component with correct dark mode classes when dark mode is enabled" time="0.00372375">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/tailwind-testing-example.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; can toggle dark mode during test execution" time="0.008471584">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/tailwind-testing-example.test.tsx" name="Tailwind CSS Testing with Unified Setup &gt; simulates clicking a button with tailwind classes" time="0.018952042">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/test/vite-env.d.test.ts" timestamp="2025-04-07T19:56:42.120Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.003024459">
        <testcase classname="src/test/vite-env.d.test.ts" name="Vite Environment Types &gt; verifies Vite types with clinical precision" time="0.000238917">
        </testcase>
        <testcase classname="src/test/vite-env.d.test.ts" name="Vite Environment Types &gt; maintains neural precision with custom environment variables" time="0.000956834">
        </testcase>
    </testsuite>
    <testsuite name="src/application/contexts/ThemeContext.test.tsx" timestamp="2025-04-07T19:56:42.120Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.001425542">
        <testcase classname="src/application/contexts/ThemeContext.test.tsx" name="ThemeContext Module (Minimal) &gt; exists as a module" time="0.000512666">
        </testcase>
    </testsuite>
    <testsuite name="src/application/contexts/ThemeProviderComponent.test.tsx" timestamp="2025-04-07T19:56:42.120Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.010334875">
        <testcase classname="src/application/contexts/ThemeProviderComponent.test.tsx" name="useTheme &gt; initializes with correct default state" time="0.001499542">
        </testcase>
        <testcase classname="src/application/contexts/ThemeProviderComponent.test.tsx" name="useTheme &gt; handles state changes with mathematical precision" time="0.007986875">
        </testcase>
    </testsuite>
    <testsuite name="src/application/controllers/ClinicalPredictionController.runtime.test.ts" timestamp="2025-04-07T19:56:42.120Z" hostname="MacBookPro" tests="12" failures="0" errors="0" skipped="0" time="0.011268209">
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateSymptomPredictionParams &gt; should return Ok for valid SymptomPredictionParams" time="0.000177542">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateSymptomPredictionParams &gt; should return Err for non-object input" time="0.00032275">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateSymptomPredictionParams &gt; should return Err for params missing required fields (patientId)" time="0.000409958">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateSymptomPredictionParams &gt; should return Err for params with incorrect field types (symptomIds)" time="0.001068667">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateConfigurePredictionParams &gt; should return Ok for valid ConfigurePredictionParams" time="0.000149041">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateConfigurePredictionParams &gt; should return Ok for empty config object" time="0.000114">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateConfigurePredictionParams &gt; should return Err for invalid field value (predictionHorizon)" time="0.000317625">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validatePredictionResultData &gt; should return Ok for valid PredictionResultData (basic object check)" time="0.000483042">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validatePredictionResultData &gt; should return Err for non-object input" time="0.000962542">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateRiskAssessmentData &gt; should return Ok for valid RiskAssessmentData" time="0.000347">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateRiskAssessmentData &gt; should return Err for non-object input" time="0.000304292">
        </testcase>
        <testcase classname="src/application/controllers/ClinicalPredictionController.runtime.test.ts" name="ClinicalPredictionController Runtime Validation &gt; validateRiskAssessmentData &gt; should return Err for data missing required fields (overallRisk)" time="0.004099583">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useBlockingTransition.test.ts" timestamp="2025-04-07T19:56:42.121Z" hostname="MacBookPro" tests="12" failures="0" errors="0" skipped="0" time="0.023008459">
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBlockingTransition &gt; should initialize with the provided initial state and isPending as false" time="0.000566041">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBlockingTransition &gt; should update state correctly using the transition setter" time="0.000913">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBlockingTransition &gt; should handle functional updates in the transition setter" time="0.000901209">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBlockingTransition &gt; should update state immediately using the immediate setter" time="0.001297666">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useFilteredListTransition &gt; should initialize with the provided initial items" time="0.000913458">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useFilteredListTransition &gt; should update all items and filtered items when updateItems is called" time="0.000592833">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useFilteredListTransition &gt; should filter items correctly when filterItems is called" time="0.000828458">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useFilteredListTransition &gt; should reset filters when resetFilters is called" time="0.001724334">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBatchedUpdates &gt; should initialize with the provided initial state" time="0.001613375">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBatchedUpdates &gt; should queue updates without modifying state" time="0.001445125">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBatchedUpdates &gt; should apply all queued updates when applyUpdates is called" time="0.003033459">
        </testcase>
        <testcase classname="src/application/hooks/useBlockingTransition.test.ts" name="useBatchedUpdates &gt; should apply immediate updates bypassing the queue" time="0.008062917">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useBrainModel.runtime.test.ts" timestamp="2025-04-07T19:56:42.122Z" hostname="MacBookPro" tests="8" failures="0" errors="0" skipped="0" time="0.004433792">
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Ok for a valid BrainModel object" time="0.00048375">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for non-object input" time="0.000163792">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for null input" time="0.000141333">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for an empty object" time="0.00015425">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for data missing required fields (e.g., id)" time="0.000255292">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for data missing required fields (e.g., regions)" time="0.001554958">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for data with incorrect field types (e.g., regions is not an array)" time="0.000406458">
        </testcase>
        <testcase classname="src/application/hooks/useBrainModel.runtime.test.ts" name="useBrainModel Runtime Validation &gt; validateBrainModelData &gt; should return Err for data with invalid nested BrainRegion structure" time="0.000221375">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useBrainModel.test.tsx" timestamp="2025-04-07T19:56:42.123Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.0122025">
        <testcase classname="src/application/hooks/useBrainModel.test.tsx" name="useBrainModel &gt; returns cached brain model data if available" time="0.011286792">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useBrainVisualization.runtime.test.ts" timestamp="2025-04-07T19:56:42.123Z" hostname="MacBookPro" tests="19" failures="0" errors="0" skipped="0" time="0.005816917">
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Ok for a valid partial BrainViewState object" time="0.000145084">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Ok for an empty object (all fields optional)" time="0.000452041">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Ok for an object with only some valid fields" time="0.000060875">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for non-object input" time="0.000211583">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for null input" time="0.000309875">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid rotationX type" time="0.000131084">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid zoom value (zero)" time="0.000253542">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid highlightedRegions type (not array)" time="0.000185375">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid highlightedRegions type (array of numbers)" time="0.00016225">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid visiblePathways type" time="0.000126833">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid renderMode value" time="0.0001425">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid transparencyLevel (too high)" time="0.000160709">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid focusPoint (not array or null)" time="0.000179708">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid focusPoint (wrong array length)" time="0.00091225">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Err for invalid focusPoint (wrong array element type)" time="0.000259459">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Ok for focusPoint being null" time="0.000047917">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; validatePartialBrainViewState &gt; should return Ok for focusPoint being a valid array" time="0.000165791">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; isValidRenderMode &gt; should return true for valid RenderMode values" time="0.0001205">
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.runtime.test.ts" name="useBrainVisualization Runtime Validation &gt; isValidRenderMode &gt; should return false for invalid RenderMode values" time="0.000717833">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useBrainVisualization.test.ts" timestamp="2025-04-07T19:56:42.125Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.065907084">
        <testcase classname="src/application/hooks/useBrainVisualization.test.ts" name="useBrainVisualization Hook &gt; renders without crashing" time="0.065014417">
            <system-out>
[TEST] beforeEach - clearing mocks

[TEST] Starting basic render test
[TEST] About to render hook
[DEBUG] useBrainVisualization hook starting with options: {
  patientId: [32m&apos;test-patient&apos;[39m,
  disabled: [33mfalse[39m,
  autoRotate: [33mfalse[39m,
  highlightActiveRegions: [33mfalse[39m
}
[DEBUG] Fetching brain model for: test-patient
[MOCK] Getting brain model for: test-patient
[TEST] Current state: { isLoading: [33mtrue[39m, hasData: [33mfalse[39m, data: [90mundefined[39m }
[DEBUG] Received brain model: {
  id: [32m&apos;test-brain-model&apos;[39m,
  patientId: [32m&apos;test-patient&apos;[39m,
  regions: [
    {
      id: [32m&apos;test-region&apos;[39m,
      name: [32m&apos;Test Region&apos;[39m,
      position: [36m[Object][39m,
      color: [32m&apos;#ff0000&apos;[39m,
      connections: [36m[Array][39m,
      activityLevel: [33m0.5[39m,
      isActive: [33mtrue[39m,
      hemisphereLocation: [32m&apos;left&apos;[39m,
      dataConfidence: [33m0.8[39m,
      volumeMl: [33m100[39m,
      riskFactor: [33m0.2[39m,
      clinicalSignificance: [32m&apos;normal&apos;[39m,
      tissueType: [32m&apos;gray&apos;[39m,
      volume: [33m1500[39m,
      activity: [33m0.5[39m
    }
  ],
  connections: [
    {
      id: [32m&apos;test-connection&apos;[39m,
      sourceId: [32m&apos;test-region&apos;[39m,
      targetId: [32m&apos;other-region&apos;[39m,
      strength: [33m0.7[39m,
      type: [32m&apos;excitatory&apos;[39m,
      directionality: [32m&apos;bidirectional&apos;[39m,
      activityLevel: [33m0.6[39m,
      pathwayLength: [33m10[39m,
      dataConfidence: [33m0.8[39m
    }
  ],
  scan: {
    id: [32m&apos;test-scan&apos;[39m,
    patientId: [32m&apos;test-patient&apos;[39m,
    scanDate: [32m&apos;2025-04-07T19:56:35.109Z&apos;[39m,
    scanType: [32m&apos;fMRI&apos;[39m,
    resolution: { x: [33m2[39m, y: [33m2[39m, z: [33m2[39m },
    scannerModel: [32m&apos;Test Scanner&apos;[39m,
    contrastAgent: [33mfalse[39m,
    notes: [32m&apos;Test scan&apos;[39m,
    technician: [32m&apos;Test Tech&apos;[39m,
    processingMethod: [32m&apos;standard&apos;[39m,
    dataQualityScore: [33m0.9[39m,
    metadata: {}
  },
  version: [32m&apos;1.0.0&apos;[39m,
  timestamp: [32m&apos;2025-04-07T19:56:35.109Z&apos;[39m,
  processingLevel: [32m&apos;analyzed&apos;[39m,
  lastUpdated: [32m&apos;2025-04-07T19:56:35.109Z&apos;[39m
}

[DEBUG] useBrainVisualization hook starting with options: {
  patientId: [32m&apos;test-patient&apos;[39m,
  disabled: [33mfalse[39m,
  autoRotate: [33mfalse[39m,
  highlightActiveRegions: [33mfalse[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useBrainVisualization.test.tsx" timestamp="2025-04-07T19:56:42.125Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="2" time="0">
        <testcase classname="src/application/hooks/useBrainVisualization.test.tsx" name="useBrainVisualization &gt; processes data with mathematical precision" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/application/hooks/useBrainVisualization.test.tsx" name="useBrainVisualization &gt; handles edge cases with clinical precision" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useClinicalContext.runtime.test.ts" timestamp="2025-04-07T19:56:42.126Z" hostname="MacBookPro" tests="19" failures="0" errors="0" skipped="0" time="0.005595042">
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateRiskAssessment &gt; should return Ok for valid RiskAssessment" time="0.000308542">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateRiskAssessment &gt; should return Err for invalid RiskAssessment (missing fields)" time="0.000226834">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateRiskAssessment &gt; should return Err for non-object input" time="0.0002975">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentResponsePredictionArray &gt; should return Ok for a valid array of TreatmentResponsePrediction" time="0.000063208">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentResponsePredictionArray &gt; should return Ok for an empty array" time="0.000087792">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentResponsePredictionArray &gt; should return Err for non-array input" time="0.000115125">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentResponsePredictionArray &gt; should return Err for an array containing invalid items" time="0.000149">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateSymptomMappingArray &gt; should return Ok for a valid array of SymptomNeuralMapping" time="0.000142125">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateSymptomMappingArray &gt; should return Ok for an empty array" time="0.000117625">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateSymptomMappingArray &gt; should return Err for non-array input" time="0.000207667">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateSymptomMappingArray &gt; should return Err for an array containing invalid items" time="0.00162975">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateDiagnosisMappingArray &gt; should return Ok for a valid array of DiagnosisNeuralMapping" time="0.000057">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateDiagnosisMappingArray &gt; should return Ok for an empty array" time="0.000046">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateDiagnosisMappingArray &gt; should return Err for non-array input" time="0.000139">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateDiagnosisMappingArray &gt; should return Err for an array containing invalid items" time="0.000180708">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentMappingArray &gt; should return Ok for a valid array of TreatmentNeuralMapping" time="0.000043084">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentMappingArray &gt; should return Ok for an empty array" time="0.000039625">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentMappingArray &gt; should return Err for non-array input" time="0.000114167">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.runtime.test.ts" name="useClinicalContext Runtime Validation &gt; validateTreatmentMappingArray &gt; should return Err for an array containing invalid items" time="0.00016325">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useClinicalContext.test.ts" timestamp="2025-04-07T19:56:42.128Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.005412125">
        <testcase classname="src/application/hooks/useClinicalContext.test.ts" name="useClinicalContext &gt; processes data with mathematical precision" time="0.00236325">
        </testcase>
        <testcase classname="src/application/hooks/useClinicalContext.test.ts" name="useClinicalContext &gt; handles edge cases with clinical precision" time="0.002196167">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/usePatientData.runtime.test.ts" timestamp="2025-04-07T19:56:42.128Z" hostname="MacBookPro" tests="8" failures="0" errors="0" skipped="0" time="0.005059084">
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Ok for a valid Patient object" time="0.0004155">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for non-object input" time="0.000247">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for null input" time="0.000160458">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for an empty object" time="0.000144333">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for data missing required top-level fields (e.g., id)" time="0.000692459">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for data missing required nested fields (e.g., demographicData.age)" time="0.001847">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for data with incorrect field types (e.g., id is number)" time="0.00024275">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.runtime.test.ts" name="usePatientData Runtime Validation &gt; validatePatientData &gt; should return Err for data with incorrect nested field types (e.g., clinicalData.diagnoses is not array)" time="0.0002675">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/usePatientData.test.ts" timestamp="2025-04-07T19:56:42.129Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.003388291">
        <testcase classname="src/application/hooks/usePatientData.test.ts" name="usePatientData &gt; processes data with mathematical precision" time="0.000844667">
        </testcase>
        <testcase classname="src/application/hooks/usePatientData.test.ts" name="usePatientData &gt; handles edge cases with clinical precision" time="0.00176025">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useSearchParams.runtime.test.ts" timestamp="2025-04-07T19:56:42.130Z" hostname="MacBookPro" tests="9" failures="0" errors="0" skipped="0" time="0.004673667">
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Ok for a valid ParamsObject" time="0.00038225">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Ok for an empty object" time="0.000065833">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for non-object input" time="0.000148333">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for array input" time="0.000349292">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for null input" time="0.000197833">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for object with invalid value type (boolean)" time="0.000162875">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for object with invalid value type (undefined)" time="0.000294916">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for object with invalid value type (object)" time="0.000275917">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.runtime.test.ts" name="useSearchParams Runtime Validation &gt; validateParamsObject &gt; should return Err for object with invalid value type (array)" time="0.001725916">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useSearchParams.test.tsx" timestamp="2025-04-07T19:56:42.132Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.013189833">
        <testcase classname="src/application/hooks/useSearchParams.test.tsx" name="useSearchParams &gt; processes data with mathematical precision" time="0.001453583">
        </testcase>
        <testcase classname="src/application/hooks/useSearchParams.test.tsx" name="useSearchParams &gt; handles edge cases with clinical precision" time="0.010432375">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useTheme.runtime.test.ts" timestamp="2025-04-07T19:56:42.132Z" hostname="MacBookPro" tests="13" failures="0" errors="0" skipped="0" time="0.010006459">
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Ok for a valid ThemeSettings object" time="0.000281167">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Ok for another valid ThemeSettings object (dark)" time="0.00014875">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for non-object input" time="0.000197834">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for null input" time="0.000129792">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for an empty object (missing required fields)" time="0.000151417">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for data missing a required field (e.g., name)" time="0.000196209">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for data with invalid theme name" time="0.001093291">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for data with incorrect field type (e.g., glowIntensity)" time="0.00014525">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for data with incorrect field type (e.g., useBloom)" time="0.000367541">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeSettings &gt; should return Err for data missing a required color field (e.g., primaryColor)" time="0.000152041">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeOption &gt; should return Ok for valid ThemeOption values" time="0.002354209">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeOption &gt; should return Err for invalid ThemeOption values" time="0.001508708">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.runtime.test.ts" name="useTheme Runtime Validation &gt; validateThemeOption &gt; should return specific error message for invalid option" time="0.001823042">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useTheme.test.tsx" timestamp="2025-04-07T19:56:42.133Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="1" time="0.008789833">
        <testcase classname="src/application/hooks/useTheme.test.tsx" name="useTheme &gt; returns the theme context value when used within a provider" time="0.007879667">
        </testcase>
        <testcase classname="src/application/hooks/useTheme.test.tsx" name="useTheme &gt; throws an error when used outside a provider" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useTreatmentPrediction.runtime.test.ts" timestamp="2025-04-07T19:56:42.134Z" hostname="MacBookPro" tests="15" failures="0" errors="0" skipped="0" time="0.004521417">
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateClinicalPredictionData &gt; should return Ok for valid Domain ClinicalPredictionData" time="0.000197084">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateClinicalPredictionData &gt; should return Err for invalid Domain ClinicalPredictionData" time="0.00013725">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateClinicalPredictionData &gt; should return Err for non-object input" time="0.000142125">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateGeneticPredictionData &gt; should return Ok for valid GeneticPredictionData (object)" time="0.000035666">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateGeneticPredictionData &gt; should return Ok for valid GeneticPredictionData (empty object)" time="0.000044125">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateGeneticPredictionData &gt; should return Ok for valid GeneticPredictionData (undefined)" time="0.000143958">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateGeneticPredictionData &gt; should return Err for invalid GeneticPredictionData (null)" time="0.000127792">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateGeneticPredictionData &gt; should return Err for invalid GeneticPredictionData (string)" time="0.000098583">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseRequest &gt; should return Ok for valid TreatmentResponseRequest DTO" time="0.000066708">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseRequest &gt; should return Err for invalid TreatmentResponseRequest DTO (missing clinical_data)" time="0.000125958">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseRequest &gt; should return Err for invalid TreatmentResponseRequest DTO (invalid clinical_data structure)" time="0.00019925">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseRequest &gt; should return Err for non-object input" time="0.000162875">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseResponse &gt; should return Ok for valid TreatmentResponseResponse DTO" time="0.000100417">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseResponse &gt; should return Err for invalid TreatmentResponseResponse DTO (missing field)" time="0.000290416">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.runtime.test.ts" name="useTreatmentPrediction Runtime Validation &gt; validateTreatmentResponseResponse &gt; should return Err for non-object input" time="0.001456708">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useTreatmentPrediction.test.ts" timestamp="2025-04-07T19:56:42.142Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.002979708">
        <testcase classname="src/application/hooks/useTreatmentPrediction.test.ts" name="useTreatmentPrediction &gt; processes data with mathematical precision" time="0.001176125">
        </testcase>
        <testcase classname="src/application/hooks/useTreatmentPrediction.test.ts" name="useTreatmentPrediction &gt; handles edge cases with clinical precision" time="0.001012458">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useVisualSettings.runtime.test.ts" timestamp="2025-04-07T19:56:42.144Z" hostname="MacBookPro" tests="13" failures="0" errors="0" skipped="0" time="0.005546041">
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Ok for a valid Partial&lt;VisualizationSettings&gt; object" time="0.000082209">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Ok for an empty object (all fields optional)" time="0.0001655">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Err for non-object input" time="0.000132958">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Err for null input" time="0.000301417">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Err for data with incorrect field type (e.g., showLabels)" time="0.000304958">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Err for data with invalid enum value (e.g., renderMode)" time="0.000212708">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Err for data with invalid enum value (e.g., levelOfDetail)" time="0.000134917">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validatePartialVisualizationSettings &gt; should return Err for invalid cameraPosition" time="0.000169334">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validateFullThemeSettings &gt; should return Ok for a valid ThemeSettings object" time="0.000371625">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validateFullThemeSettings &gt; should return Err for non-object input" time="0.000148875">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validateFullThemeSettings &gt; should return Err for an empty object (missing required fields)" time="0.001642542">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validateFullThemeSettings &gt; should return Err for data missing a required field (e.g., name)" time="0.000243917">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.runtime.test.ts" name="useVisualSettings Runtime Validation &gt; validateFullThemeSettings &gt; should return Err for data with incorrect field type (e.g., glowIntensity)" time="0.000218208">
        </testcase>
    </testsuite>
    <testsuite name="src/application/hooks/useVisualSettings.test.ts" timestamp="2025-04-07T19:56:42.151Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.002942708">
        <testcase classname="src/application/hooks/useVisualSettings.test.ts" name="useVisualSettings &gt; processes data with mathematical precision" time="0.000556708">
        </testcase>
        <testcase classname="src/application/hooks/useVisualSettings.test.ts" name="useVisualSettings &gt; handles edge cases with clinical precision" time="0.001619167">
        </testcase>
    </testsuite>
    <testsuite name="src/application/providers/ThemeProvider.enhanced.test.tsx" timestamp="2025-04-07T19:56:42.152Z" hostname="MacBookPro" tests="6" failures="0" errors="0" skipped="2" time="0.155161459">
        <testcase classname="src/application/providers/ThemeProvider.enhanced.test.tsx" name="ThemeProvider (Enhanced Tests with renderWithProviders) &gt; initializes with default theme (clinical/light)" time="0.006202459">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.enhanced.test.tsx" name="ThemeProvider (Enhanced Tests with renderWithProviders) &gt; toggles to dark mode via setTheme" time="0.108002292">
            <system-out>
[ThemeProvider] applyTheme called with: light

[AuditLogClient] SYSTEM_CONFIG_CHANGE: {
  timestamp: [35m2025-04-07T19:56:27.761Z[39m,
  eventType: [32m&apos;SYSTEM_CONFIG_CHANGE&apos;[39m,
  action: [32m&apos;THEME_CHANGE&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  details: [32m&apos;Theme changed to dark&apos;[39m
}

[ThemeProvider] applyTheme called with: dark

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.enhanced.test.tsx" name="ThemeProvider (Enhanced Tests with renderWithProviders) &gt; toggles back to light mode via setTheme" time="0.018447375">
            <system-out>
[ThemeProvider] applyTheme called with: dark

[AuditLogClient] SYSTEM_CONFIG_CHANGE: {
  timestamp: [35m2025-04-07T19:56:27.788Z[39m,
  eventType: [32m&apos;SYSTEM_CONFIG_CHANGE&apos;[39m,
  action: [32m&apos;THEME_CHANGE&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  details: [32m&apos;Theme changed to light&apos;[39m
}

[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.enhanced.test.tsx" name="ThemeProvider (Enhanced Tests with renderWithProviders) &gt; respects localStorage preference on initial render" time="0.020353875">
            <system-out>
[ThemeProvider] applyTheme called with: dark

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.enhanced.test.tsx" name="ThemeProvider (Enhanced Tests with renderWithProviders) &gt; uses system preference when theme is set to system" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.enhanced.test.tsx" name="ThemeProvider (Enhanced Tests with renderWithProviders) &gt; updates theme when system preference changes while set to system" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/application/providers/ThemeProvider.test.tsx" timestamp="2025-04-07T19:56:42.154Z" hostname="MacBookPro" tests="6" failures="0" errors="0" skipped="0" time="0.158561792">
        <testcase classname="src/application/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; uses system theme by default (prefers light)" time="0.00350975">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; uses system theme by default (prefers dark)" time="0.00336025">
            <system-out>
[ThemeProvider] applyTheme called with: dark

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; loads saved theme from localStorage" time="0.003019209">
            <system-out>
[ThemeProvider] applyTheme called with: dark

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; allows changing theme" time="0.126007958">
            <system-out>
[ThemeProvider] applyTheme called with: light

[AuditLogClient] SYSTEM_CONFIG_CHANGE: {
  timestamp: [35m2025-04-07T19:56:36.959Z[39m,
  eventType: [32m&apos;SYSTEM_CONFIG_CHANGE&apos;[39m,
  action: [32m&apos;THEME_CHANGE&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  details: [32m&apos;Theme changed to dark&apos;[39m
}

[ThemeProvider] applyTheme called with: dark

[AuditLogClient] SYSTEM_CONFIG_CHANGE: {
  timestamp: [35m2025-04-07T19:56:36.981Z[39m,
  eventType: [32m&apos;SYSTEM_CONFIG_CHANGE&apos;[39m,
  action: [32m&apos;THEME_CHANGE&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  details: [32m&apos;Theme changed to light&apos;[39m
}

[ThemeProvider] applyTheme called with: light

[AuditLogClient] SYSTEM_CONFIG_CHANGE: {
  timestamp: [35m2025-04-07T19:56:36.994Z[39m,
  eventType: [32m&apos;SYSTEM_CONFIG_CHANGE&apos;[39m,
  action: [32m&apos;THEME_CHANGE&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  details: [32m&apos;Theme changed to system&apos;[39m
}

[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; follows system theme when set to system" time="0.01208175">
            <system-out>
[ThemeProvider] applyTheme called with: dark

[ThemeProvider] handleChange called. Event matches: false
[ThemeProvider] applyTheme called with: light

[ThemeProvider] handleChange called. Event matches: true
[ThemeProvider] applyTheme called with: dark

            </system-out>
        </testcase>
        <testcase classname="src/application/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; throws error when useTheme is used outside ThemeProvider" time="0.009292125">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/models/index.test.ts" timestamp="2025-04-07T19:56:42.155Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="0" time="0.002502208">
        <testcase classname="src/domain/models/index.test.ts" name="Domain models index exports &gt; exports brain model functions" time="0.00055425">
        </testcase>
        <testcase classname="src/domain/models/index.test.ts" name="Domain models index exports &gt; exports brain mapping functions" time="0.000343125">
        </testcase>
        <testcase classname="src/domain/models/index.test.ts" name="Domain models index exports &gt; exports patient model functions" time="0.000176791">
        </testcase>
        <testcase classname="src/domain/models/index.test.ts" name="Domain models index exports &gt; does not export legacy model implementations" time="0.000643875">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/BiometricStreamController.test.ts" timestamp="2025-04-07T19:56:42.155Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="2" time="0">
        <testcase classname="src/application/services/BiometricStreamController.test.ts" name="BiometricStreamController (Rebuilt) &gt; initializes with default state" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/application/services/BiometricStreamController.test.ts" name="BiometricStreamController (Rebuilt) &gt; connects streams and updates state" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/ClinicalPredictionController.test.ts" timestamp="2025-04-07T19:56:42.155Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.011410875">
        <testcase classname="src/application/services/ClinicalPredictionController.test.ts" name="useClinicalPredictionController &gt; processes data with mathematical precision" time="0.00234825">
        </testcase>
        <testcase classname="src/application/services/ClinicalPredictionController.test.ts" name="useClinicalPredictionController &gt; handles edge cases with clinical precision" time="0.008148458">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/NeuralActivityController.test.ts" timestamp="2025-04-07T19:56:42.156Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.00225525">
        <testcase classname="src/application/services/NeuralActivityController.test.ts" name="NeuralActivityController (Minimal) &gt; exists as a module" time="0.001490542">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/NeuroSyncOrchestrator.test.ts" timestamp="2025-04-07T19:56:42.156Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.053648958">
        <testcase classname="src/application/services/NeuroSyncOrchestrator.test.ts" name="useNeuroSyncOrchestrator &gt; should initialize with default state" time="0.005331958">
            <system-err>
TemporalService.getTemporalDynamics called for patient-123 with scale realtime, returning mock data.
Warning: An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at TestComponent (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@testing-library/react/dist/pure.js:329:5)
Warning: An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at TestComponent (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@testing-library/react/dist/pure.js:329:5)
Warning: An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at TestComponent (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@testing-library/react/dist/pure.js:329:5)

            </system-err>
        </testcase>
        <testcase classname="src/application/services/NeuroSyncOrchestrator.test.ts" name="useNeuroSyncOrchestrator &gt; should provide actions object" time="0.047457">
            <system-err>
TemporalService.getTemporalDynamics called for patient-123 with scale realtime, returning mock data.

TemporalService.getTemporalDynamics called for patient-123 with scale realtime, returning mock data.

Error: Error: getaddrinfo ENOTFOUND api.novamind.io
    at Object.dispatchError (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/xhr/xhr-utils.js:63:19)
    at Request.&lt;anonymous&gt; (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequest-impl.js:655:18)
    at Request.emit (node:events:519:35)
    at ClientRequest.&lt;anonymous&gt; (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/helpers/http-request.js:127:14)
    at ClientRequest.emit (node:events:507:28)
    at emitErrorEvent (node:_http_client:104:11)
    at TLSSocket.socketErrorListener (node:_http_client:518:5)
    at TLSSocket.emit (node:events:507:28)
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3) [90mundefined[39m

Error: Error: getaddrinfo ENOTFOUND api.novamind.io
    at Object.dispatchError (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/xhr/xhr-utils.js:63:19)
    at Request.&lt;anonymous&gt; (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequest-impl.js:655:18)
    at Request.emit (node:events:519:35)
    at ClientRequest.&lt;anonymous&gt; (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/helpers/http-request.js:127:14)
    at ClientRequest.emit (node:events:507:28)
    at emitErrorEvent (node:_http_client:104:11)
    at TLSSocket.socketErrorListener (node:_http_client:518:5)
    at TLSSocket.emit (node:events:507:28)
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3) [90mundefined[39m

Error: Error: getaddrinfo ENOTFOUND api.novamind.io
    at Object.dispatchError (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/xhr/xhr-utils.js:63:19)
    at Request.&lt;anonymous&gt; (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequest-impl.js:655:18)
    at Request.emit (node:events:519:35)
    at ClientRequest.&lt;anonymous&gt; (/Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/jsdom/lib/jsdom/living/helpers/http-request.js:127:14)
    at ClientRequest.emit (node:events:507:28)
    at emitErrorEvent (node:_http_client:104:11)
    at TLSSocket.socketErrorListener (node:_http_client:518:5)
    at TLSSocket.emit (node:events:507:28)
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3) [90mundefined[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/TemporalDynamicsController.test.ts" timestamp="2025-04-07T19:56:42.156Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.009398292">
        <testcase classname="src/application/services/TemporalDynamicsController.test.ts" name="useTemporalDynamicsController &gt; processes data with mathematical precision" time="0.001157458">
        </testcase>
        <testcase classname="src/application/services/TemporalDynamicsController.test.ts" name="useTemporalDynamicsController &gt; handles edge cases with clinical precision" time="0.00738875">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/brainDataTransformer.runtime.test.ts" timestamp="2025-04-07T19:56:42.156Z" hostname="MacBookPro" tests="17" failures="0" errors="0" skipped="0" time="0.0053155">
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainModelData &gt; should return Ok for valid BrainModel data" time="0.000184292">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainModelData &gt; should return Err for data missing regions" time="0.000138959">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainModelData &gt; should return Err for data with invalid connections array" time="0.000135667">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainModelData &gt; should return Err for non-object input" time="0.000143167">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainRegionArray &gt; should return Ok for valid BrainRegion array" time="0.000049459">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainRegionArray &gt; should return Ok for empty array" time="0.000082833">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainRegionArray &gt; should return Err for array with invalid BrainRegion objects" time="0.000102625">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateBrainRegionArray &gt; should return Err for non-array input" time="0.000115125">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateRenderMode &gt; should return Ok for valid RenderMode values" time="0.000614583">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateRenderMode &gt; should return Err for invalid string values" time="0.000311541">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateRenderMode &gt; should return Err for non-string input" time="0.001464458">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateThemeSettings &gt; should return Ok for valid ThemeSettings object" time="0.000096542">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateThemeSettings &gt; should return Err for invalid ThemeSettings object (wrong type)" time="0.0001715">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; validateThemeSettings &gt; should return Err for non-object input" time="0.000205667">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; isThemeSettings &gt; should return true for valid theme settings" time="0.000034209">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; isThemeSettings &gt; should return false for object missing properties" time="0.00003775">
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.runtime.test.ts" name="brainDataTransformer Runtime Validation &gt; isThemeSettings &gt; should return false for object with wrong property type" time="0.000044583">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/brainDataTransformer.test.ts" timestamp="2025-04-07T19:56:42.158Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.002955875">
        <testcase classname="src/domain/utils/brainDataTransformer.test.ts" name="transformBrainData &gt; processes data with mathematical precision" time="0.000394916">
            <system-err>
Invalid data passed to transformBrainData: Invalid BrainModel data structure.

            </system-err>
        </testcase>
        <testcase classname="src/domain/utils/brainDataTransformer.test.ts" name="transformBrainData &gt; handles edge cases with clinical precision" time="0.001786833">
            <system-err>
Invalid data passed to transformBrainData: Invalid BrainModel data structure.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/index.test.ts" timestamp="2025-04-07T19:56:42.158Z" hostname="MacBookPro" tests="5" failures="0" errors="0" skipped="5" time="0">
        <testcase classname="src/domain/utils/index.test.ts" name="Domain utilities exports &gt; exports shared type verification utilities" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/domain/utils/index.test.ts" name="Domain utilities exports &gt; exports brain-specific type verification utilities" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/domain/utils/index.test.ts" name="Domain utilities exports &gt; exports clinical-specific type verification utilities" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/domain/utils/index.test.ts" name="Domain utilities exports &gt; exports unified verifiers object" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/domain/utils/index.test.ts" name="Domain utilities exports &gt; ensures verifiers have the correct methods" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/progressiveLoader.runtime.test.ts" timestamp="2025-04-07T19:56:42.159Z" hostname="MacBookPro" tests="14" failures="0" errors="0" skipped="0" time="0.004526167">
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateBrainModelData &gt; should return Ok for valid BrainModel data" time="0.000071583">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateBrainModelData &gt; should return Err for invalid data" time="0.000272542">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateBrainRegionArray &gt; should return Ok for valid BrainRegion array" time="0.000037584">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateBrainRegionArray &gt; should return Ok for empty array" time="0.000033875">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateBrainRegionArray &gt; should return Err for array with invalid BrainRegion objects" time="0.000175041">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateBrainRegionArray &gt; should return Err for non-array input" time="0.00011825">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateNeuralConnectionArray &gt; should return Ok for valid NeuralConnection array" time="0.000049583">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateNeuralConnectionArray &gt; should return Ok for empty array" time="0.000096542">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateNeuralConnectionArray &gt; should return Err for array with invalid NeuralConnection objects" time="0.000166">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateNeuralConnectionArray &gt; should return Err for non-array input" time="0.000153917">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateProgressCallback &gt; should return Ok for a valid function" time="0.000143875">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateProgressCallback &gt; should return Ok for undefined" time="0.000144459">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateProgressCallback &gt; should return Err for non-function/non-undefined input" time="0.000285583">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.runtime.test.ts" name="progressiveLoader Runtime Validation &gt; validateProgressCallback &gt; should return Err for null" time="0.001574458">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/progressiveLoader.test.ts" timestamp="2025-04-07T19:56:42.160Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.002780875">
        <testcase classname="src/domain/utils/progressiveLoader.test.ts" name="loadRegionsProgressively &gt; processes data with mathematical precision" time="0.000300833">
        </testcase>
        <testcase classname="src/domain/utils/progressiveLoader.test.ts" name="loadRegionsProgressively &gt; handles edge cases with clinical precision" time="0.001646">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/ApiClient.runtime.test.ts" timestamp="2025-04-07T19:56:42.160Z" hostname="MacBookPro" tests="18" failures="0" errors="0" skipped="0" time="0.017230084">
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Ok for valid data matching the guard" time="0.000386208">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Ok for valid array data matching the array guard" time="0.000131667">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Err for data not matching the guard (missing field)" time="0.00016975">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Err for data not matching the guard (wrong type)" time="0.000120542">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Err for array data not matching the array guard" time="0.000146959">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Err for non-object input when expecting object" time="0.000333416">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should return Err for non-array input when expecting array" time="0.000201542">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should include context in the error message" time="0.00509825">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; validateApiResponse &gt; should handle unserializable data in error message" time="0.001318917">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatient &gt; should return true for valid patient object" time="0.000035875">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatient &gt; should return false for invalid patient object (missing name)" time="0.000058166">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatient &gt; should return false for invalid patient object (wrong id type)" time="0.000047458">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatient &gt; should return false for null" time="0.000038542">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatient &gt; should return false for non-object" time="0.002587333">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatientArray &gt; should return true for valid patient array" time="0.003164542">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatientArray &gt; should return false for invalid patient array" time="0.00062275">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatientArray &gt; should return false for non-array" time="0.000114459">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.runtime.test.ts" name="ApiClient Runtime Validation &gt; isApiPatientArray &gt; should return true for empty array" time="0.000823542">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/ApiClient.test.ts" timestamp="2025-04-07T19:56:42.162Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.004420416">
        <testcase classname="src/infrastructure/api/ApiClient.test.ts" name="apiClient &gt; processes GET requests with mathematical precision" time="0.001687292">
            <system-out>
[Mock API] GET /patients
[Mock Test] Handling mock response for: /patients

            </system-out>
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.test.ts" name="apiClient &gt; processes POST requests with clinical precision" time="0.000856292">
            <system-out>
[Mock API] POST /auth/login { username: [32m&apos;neural-scientist&apos;[39m, password: [32m&apos;quantum-safe&apos;[39m }
[Mock Test] Handling mock response for: /auth/login

            </system-out>
        </testcase>
        <testcase classname="src/infrastructure/api/ApiClient.test.ts" name="apiClient &gt; supports neural authorization patterns" time="0.001039917">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/ApiGateway.test.ts" timestamp="2025-04-07T19:56:42.163Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.001950125">
        <testcase classname="src/infrastructure/api/ApiGateway.test.ts" name="apiClient &gt; processes data with mathematical precision" time="0.000222375">
        </testcase>
        <testcase classname="src/infrastructure/api/ApiGateway.test.ts" name="apiClient &gt; handles edge cases with clinical precision" time="0.000873125">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/EnhancedMockApiClient.test.ts" timestamp="2025-04-07T19:56:42.163Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.001502125">
        <testcase classname="src/infrastructure/api/EnhancedMockApiClient.test.ts" name="enhancedMockApiClient &gt; processes data with mathematical precision" time="0.000198584">
        </testcase>
        <testcase classname="src/infrastructure/api/EnhancedMockApiClient.test.ts" name="enhancedMockApiClient &gt; handles edge cases with clinical precision" time="0.000531791">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/IApiClient.test.ts" timestamp="2025-04-07T19:56:42.163Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.007458">
        <testcase classname="src/infrastructure/api/IApiClient.test.ts" name="IApiClient &gt; processes data with mathematical precision" time="0.001539">
            <system-err>
Promise returned by `expect(actual).resolves.toEqual(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/infrastructure/api/IApiClient.test.ts:32:18

            </system-err>
        </testcase>
        <testcase classname="src/infrastructure/api/IApiClient.test.ts" name="IApiClient &gt; handles edge cases with clinical precision" time="0.005114709">
            <system-err>
Promise returned by `expect(actual).rejects.toThrow(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/infrastructure/api/IApiClient.test.ts:56:63

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/MockApiClient.test.ts" timestamp="2025-04-07T19:56:42.163Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.008473042">
        <testcase classname="src/infrastructure/api/MockApiClient.test.ts" name="mockApiClient &gt; generates brain models with mathematical precision" time="0.000450875">
        </testcase>
        <testcase classname="src/infrastructure/api/MockApiClient.test.ts" name="mockApiClient &gt; handles default patient ID with clinical precision" time="0.000138375">
        </testcase>
        <testcase classname="src/infrastructure/api/MockApiClient.test.ts" name="mockApiClient &gt; returns consistent model structure with quantum-level type safety" time="0.00628275">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/XGBoostService.runtime.test.ts" timestamp="2025-04-07T19:56:42.164Z" hostname="MacBookPro" tests="10" failures="0" errors="0" skipped="0" time="0.0043835">
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionRequest &gt; should return true for valid RiskPredictionRequest" time="0.000065417">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionRequest &gt; should return false for invalid RiskPredictionRequest (missing field)" time="0.000104084">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionRequest &gt; should return false for null" time="0.000196959">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionRequest &gt; should return false for non-object" time="0.00009025">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionResponse &gt; should return true for valid RiskPredictionResponse" time="0.00018475">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionResponse &gt; should return false for invalid RiskPredictionResponse (wrong type/enum)" time="0.000064958">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionResponse &gt; should return false for null" time="0.000072458">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; isRiskPredictionResponse &gt; should return false for non-object" time="0.000126583">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; validateData &gt; should return Ok when data matches the guard" time="0.00033875">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.runtime.test.ts" name="XGBoostService Runtime Validation &gt; validateData &gt; should return Err when data does not match the guard" time="0.001697458">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/XGBoostService.test.ts" timestamp="2025-04-07T19:56:42.165Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.001561458">
        <testcase classname="src/infrastructure/api/XGBoostService.test.ts" name="XGBoostService &gt; processes data with mathematical precision" time="0.000151584">
        </testcase>
        <testcase classname="src/infrastructure/api/XGBoostService.test.ts" name="XGBoostService &gt; handles edge cases with clinical precision" time="0.000609625">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/api/mockApi.test.ts" timestamp="2025-04-07T19:56:42.165Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.007386417">
        <testcase classname="src/infrastructure/api/mockApi.test.ts" name="mockApi &gt; processes data with mathematical precision" time="0.001154208">
        </testcase>
        <testcase classname="src/infrastructure/api/mockApi.test.ts" name="mockApi &gt; handles edge cases with clinical precision" time="0.00498225">
        </testcase>
    </testsuite>
    <testsuite name="src/infrastructure/config/initializeApp.test.ts" timestamp="2025-04-07T19:56:42.165Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="1" time="0">
        <testcase classname="src/infrastructure/config/initializeApp.test.ts" name="initializeApp &gt; should be tested properly" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/performanceUtils.test.ts" timestamp="2025-04-07T19:56:42.165Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.005720667">
        <testcase classname="src/shared/utils/performanceUtils.test.ts" name="debounce &gt; should only call the function after the delay" time="0.000624958">
        </testcase>
        <testcase classname="src/shared/utils/performanceUtils.test.ts" name="debounce &gt; should pass arguments to the debounced function" time="0.001188">
        </testcase>
        <testcase classname="src/shared/utils/performanceUtils.test.ts" name="debounce &gt; should reset the timer if called again within the delay" time="0.00304575">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/containers/minimal.minimal.test.tsx" timestamp="2025-04-07T19:56:42.166Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.014777583">
        <testcase classname="src/presentation/containers/minimal.minimal.test.tsx" name="Basic Test &gt; verifies React rendering works" time="0.01322625">
        </testcase>
        <testcase classname="src/presentation/containers/minimal.minimal.test.tsx" name="Basic Test &gt; verifies TextEncoder works properly" time="0.000740875">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/containers/minimal.test.tsx" timestamp="2025-04-07T19:56:42.166Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.014027166">
        <testcase classname="src/presentation/containers/minimal.test.tsx" name="Basic Test &gt; confirms test infrastructure is working" time="0.013041791">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/common/AdaptiveLOD.test.tsx" timestamp="2025-04-07T19:56:42.166Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.00139425">
        <testcase classname="src/presentation/common/AdaptiveLOD.test.tsx" name="AdaptiveLOD (Minimal) &gt; exists as a module" time="0.000531209">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/common/PerformanceMonitor.test.tsx" timestamp="2025-04-07T19:56:42.166Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.001370166">
        <testcase classname="src/presentation/common/PerformanceMonitor.test.tsx" name="PerformanceMonitor (Minimal) &gt; exists as a module" time="0.000517708">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/common/VisualizationErrorBoundary.test.tsx" timestamp="2025-04-07T19:56:42.167Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.010999584">
        <testcase classname="src/presentation/common/VisualizationErrorBoundary.test.tsx" name="VisualizationErrorBoundary &gt; renders with neural precision" time="0.001592">
        </testcase>
        <testcase classname="src/presentation/common/VisualizationErrorBoundary.test.tsx" name="VisualizationErrorBoundary &gt; responds to user interaction with quantum precision" time="0.00844375">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/ActivityIndicator.test.tsx" timestamp="2025-04-07T19:56:42.167Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.0293075">
        <testcase classname="src/presentation/atoms/ActivityIndicator.test.tsx" name="ActivityIndicator &gt; renders the mock mesh when activity is low" time="0.016161083">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
            <system-err>
Warning: &lt;sphereGeometry /&gt; is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.
    at sphereGeometry
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.test.tsx:75:14
    at ActivityIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.tsx:77:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: The tag &lt;sphereGeometry&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at sphereGeometry
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.test.tsx:75:14
    at ActivityIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.tsx:77:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: &lt;shaderMaterial /&gt; is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.
    at shaderMaterial
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.test.tsx:75:14
    at ActivityIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.tsx:77:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: The tag &lt;shaderMaterial&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at shaderMaterial
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.test.tsx:75:14
    at ActivityIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/ActivityIndicator.tsx:77:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)

            </system-err>
        </testcase>
        <testcase classname="src/presentation/atoms/ActivityIndicator.test.tsx" name="ActivityIndicator &gt; does not render when activity is NONE" time="0.010847625">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/Button.test.tsx" timestamp="2025-04-07T19:56:42.167Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.011095542">
        <testcase classname="src/presentation/atoms/Button.test.tsx" name="Button &gt; renders with neural precision" time="0.00160125">
        </testcase>
        <testcase classname="src/presentation/atoms/Button.test.tsx" name="Button &gt; responds to user interaction with quantum precision" time="0.008534708">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/Card.test.tsx" timestamp="2025-04-07T19:56:42.167Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.018693666">
        <testcase classname="src/presentation/atoms/Card.test.tsx" name="Card &gt; renders with neural precision" time="0.001790709">
        </testcase>
        <testcase classname="src/presentation/atoms/Card.test.tsx" name="Card &gt; responds to user interaction with quantum precision" time="0.015789333">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/DocumentTitle.test.tsx" timestamp="2025-04-07T19:56:42.168Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.01127975">
        <testcase classname="src/presentation/atoms/DocumentTitle.test.tsx" name="DocumentTitle &gt; renders with neural precision" time="0.001625292">
        </testcase>
        <testcase classname="src/presentation/atoms/DocumentTitle.test.tsx" name="DocumentTitle &gt; responds to user interaction with quantum precision" time="0.008784959">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" timestamp="2025-04-07T19:56:42.168Z" hostname="MacBookPro" tests="6" failures="0" errors="0" skipped="0" time="0.050432458">
        <testcase classname="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" name="NeuralCorrelationBadge &gt; renders with minimal props and displays correct strength" time="0.003431166">
        </testcase>
        <testcase classname="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" name="NeuralCorrelationBadge &gt; applies different color schemes based on correlation strength" time="0.004908125">
        </testcase>
        <testcase classname="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" name="NeuralCorrelationBadge &gt; hides strength when showStrength is false" time="0.002175542">
        </testcase>
        <testcase classname="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" name="NeuralCorrelationBadge &gt; respects size prop with corresponding CSS classes" time="0.034432125">
            <system-err>
Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?

Check the render method of `SlotClone`.
    at Badge (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/Badge.tsx:26:18)
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-slot/dist/index.mjs:25:11
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-slot/dist/index.mjs:6:11
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-primitive/dist/index.mjs:26:13
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-slot/dist/index.mjs:25:11
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-slot/dist/index.mjs:6:11
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-primitive/dist/index.mjs:26:13
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-popper/dist/index.mjs:38:13
    at file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-tooltip/dist/index.mjs:164:13
    at Provider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-context/dist/index.mjs:27:15)
    at Provider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-context/dist/index.mjs:27:15)
    at Popper (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-popper/dist/index.mjs:30:11)
    at Tooltip (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-tooltip/dist/index.mjs:73:5)
    at Provider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-context/dist/index.mjs:27:15)
    at TooltipProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@radix-ui/react-tooltip/dist/index.mjs:29:5)
    at NeuralCorrelationBadge (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/NeuralCorrelationBadge.tsx:12:3)

            </system-err>
        </testcase>
        <testcase classname="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" name="NeuralCorrelationBadge &gt; applies custom className when provided" time="0.003103208">
        </testcase>
        <testcase classname="src/presentation/atoms/NeuralCorrelationBadge.test.tsx" name="NeuralCorrelationBadge &gt; renders without tooltip when showTooltip is false" time="0.001360125">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/RegionSelectionIndicator.test.tsx" timestamp="2025-04-07T19:56:42.168Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.030126625">
        <testcase classname="src/presentation/atoms/RegionSelectionIndicator.test.tsx" name="RegionSelectionIndicator &gt; renders the mock mesh when selected" time="0.003428459">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
            <system-err>
Warning: &lt;sphereGeometry /&gt; is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.
    at sphereGeometry
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.test.tsx:79:14
    at RegionSelectionIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.tsx:58:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: &lt;shaderMaterial /&gt; is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.
    at shaderMaterial
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.test.tsx:79:14
    at RegionSelectionIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.tsx:58:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)

            </system-err>
        </testcase>
        <testcase classname="src/presentation/atoms/RegionSelectionIndicator.test.tsx" name="RegionSelectionIndicator &gt; renders the mock mesh when not selected" time="0.024568459">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
            <system-err>
Warning: &lt;sphereGeometry /&gt; is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.
    at sphereGeometry
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.test.tsx:79:14
    at RegionSelectionIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.tsx:58:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: The tag &lt;sphereGeometry&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at sphereGeometry
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.test.tsx:79:14
    at RegionSelectionIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.tsx:58:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: &lt;shaderMaterial /&gt; is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.
    at shaderMaterial
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.test.tsx:79:14
    at RegionSelectionIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.tsx:58:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)
Warning: The tag &lt;shaderMaterial&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at shaderMaterial
    at div
    at /Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.test.tsx:79:14
    at RegionSelectionIndicator (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/atoms/RegionSelectionIndicator.tsx:58:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/atoms/index.test.ts" timestamp="2025-04-07T19:56:42.169Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.001597792">
        <testcase classname="src/presentation/atoms/index.test.ts" name="index &gt; processes data with mathematical precision" time="0.000159792">
        </testcase>
        <testcase classname="src/presentation/atoms/index.test.ts" name="index &gt; handles edge cases with clinical precision" time="0.000627041">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/providers/ThemeProvider.test.tsx" timestamp="2025-04-07T19:56:42.169Z" hostname="MacBookPro" tests="6" failures="0" errors="0" skipped="0" time="0.198873958">
        <testcase classname="src/presentation/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; uses system theme by default (prefers light)" time="0.004699875">
        </testcase>
        <testcase classname="src/presentation/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; uses system theme by default (prefers dark)" time="0.00385475">
        </testcase>
        <testcase classname="src/presentation/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; loads saved theme from localStorage" time="0.006296166">
        </testcase>
        <testcase classname="src/presentation/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; allows changing theme" time="0.164422459">
        </testcase>
        <testcase classname="src/presentation/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; follows system theme when set to system" time="0.008999334">
        </testcase>
        <testcase classname="src/presentation/providers/ThemeProvider.test.tsx" name="ThemeProvider &gt; throws error when useTheme is used outside ThemeProvider" time="0.009545416">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/BrainModelViewer.test.tsx" timestamp="2025-04-07T19:56:42.170Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.026305208">
        <testcase classname="src/presentation/pages/BrainModelViewer.test.tsx" name="BrainModelViewer &gt; renders with neural precision" time="0.004960291">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/BrainModelViewer.test.tsx" name="BrainModelViewer &gt; responds to user interaction with quantum precision" time="0.019165125">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/BrainVisualizationPage.test.tsx" timestamp="2025-04-07T19:56:42.170Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="3.039490625">
        <testcase classname="src/presentation/pages/BrainVisualizationPage.test.tsx" name="BrainVisualizationPage &gt; renders with neural precision" time="1.509982833">
            <system-out>
[AuditLogClient] BRAIN_MODEL_VIEW: {
  timestamp: [35m2025-04-07T19:56:26.618Z[39m,
  eventType: [32m&apos;BRAIN_MODEL_VIEW&apos;[39m,
  action: [32m&apos;view&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  resourceType: [32m&apos;brainModel&apos;[39m
}
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/BrainVisualizationPage.test.tsx" name="BrainVisualizationPage &gt; responds to user interaction with quantum precision" time="1.52602125">
            <system-out>
[AuditLogClient] BRAIN_MODEL_VIEW: {
  timestamp: [35m2025-04-07T19:56:25.102Z[39m,
  eventType: [32m&apos;BRAIN_MODEL_VIEW&apos;[39m,
  action: [32m&apos;view&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  resourceType: [32m&apos;brainModel&apos;[39m
}
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/Dashboard.test.tsx" timestamp="2025-04-07T19:56:42.170Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.033795208">
        <testcase classname="src/presentation/pages/Dashboard.test.tsx" name="Dashboard &gt; renders with neural precision" time="0.006736958">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/Dashboard.test.tsx" name="Dashboard &gt; responds to user interaction with quantum precision" time="0.024881917">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/DigitalTwinDemo.test.tsx" timestamp="2025-04-07T19:56:42.171Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.030133292">
        <testcase classname="src/presentation/pages/DigitalTwinDemo.test.tsx" name="DigitalTwinDemo &gt; renders the visualization canvas" time="0.009338834">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/DigitalTwinDemo.test.tsx" name="DigitalTwinDemo &gt; responds to user interaction with quantum precision" time="0.018581709">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/Login.test.tsx" timestamp="2025-04-07T19:56:42.171Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.095788042">
        <testcase classname="src/presentation/pages/Login.test.tsx" name="Login &gt; renders with neural precision" time="0.004991333">
        </testcase>
        <testcase classname="src/presentation/pages/Login.test.tsx" name="Login &gt; responds to user interaction with quantum precision" time="0.00462625">
        </testcase>
        <testcase classname="src/presentation/pages/Login.test.tsx" name="Login &gt; handles form submission" time="0.085379">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/NotFound.test.tsx" timestamp="2025-04-07T19:56:42.171Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.019715208">
        <testcase classname="src/presentation/pages/NotFound.test.tsx" name="NotFound &gt; renders with neural precision" time="0.003105125">
            <system-out>
[AuditLogClient] SYSTEM_ERROR: {
  timestamp: [35m2025-04-07T19:56:35.515Z[39m,
  eventType: [32m&apos;SYSTEM_ERROR&apos;[39m,
  action: [32m&apos;not_found&apos;[39m,
  result: [32m&apos;failure&apos;[39m,
  details: [32m&apos;Attempted to navigate to /&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/NotFound.test.tsx" name="NotFound &gt; responds to user interaction with quantum precision" time="0.015812167">
            <system-out>
[AuditLogClient] SYSTEM_ERROR: {
  timestamp: [35m2025-04-07T19:56:35.511Z[39m,
  eventType: [32m&apos;SYSTEM_ERROR&apos;[39m,
  action: [32m&apos;not_found&apos;[39m,
  result: [32m&apos;failure&apos;[39m,
  details: [32m&apos;Attempted to navigate to /&apos;[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/PatientProfile.test.tsx" timestamp="2025-04-07T19:56:42.172Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.071332625">
        <testcase classname="src/presentation/pages/PatientProfile.test.tsx" name="PatientProfile &gt; renders with neural precision" time="0.013482667">
            <system-out>
[AuditLogClient] PATIENT_RECORD_VIEW: {
  timestamp: [35m2025-04-07T19:56:32.103Z[39m,
  eventType: [32m&apos;PATIENT_RECORD_VIEW&apos;[39m,
  action: [32m&apos;view&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  resourceType: [32m&apos;patient&apos;[39m,
  resourceId: [32m&apos;test-patient-123&apos;[39m
}
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/PatientProfile.test.tsx" name="PatientProfile &gt; responds to user interaction with quantum precision" time="0.055799792">
            <system-out>
[AuditLogClient] PATIENT_RECORD_VIEW: {
  timestamp: [35m2025-04-07T19:56:32.059Z[39m,
  eventType: [32m&apos;PATIENT_RECORD_VIEW&apos;[39m,
  action: [32m&apos;view&apos;[39m,
  result: [32m&apos;success&apos;[39m,
  resourceType: [32m&apos;patient&apos;[39m,
  resourceId: [32m&apos;test-patient-123&apos;[39m
}
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/PatientsList.test.tsx" timestamp="2025-04-07T19:56:42.175Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="0" time="0.227444125">
        <testcase classname="src/presentation/pages/PatientsList.test.tsx" name="PatientsList Page &gt; renders patient list correctly" time="0.120544667">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/PatientsList.test.tsx" name="PatientsList Page &gt; navigates to patient profile on button click" time="0.032309541">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/PatientsList.test.tsx" name="PatientsList Page &gt; displays loading state" time="0.029862125">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/pages/PatientsList.test.tsx" name="PatientsList Page &gt; displays error state" time="0.042219167">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/PredictionAnalytics.test.tsx" timestamp="2025-04-07T19:56:42.176Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.012308708">
        <testcase classname="src/presentation/pages/PredictionAnalytics.test.tsx" name="PredictionAnalytics (Minimal) &gt; exists as a module" time="0.009109542">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/pages/Settings.test.tsx" timestamp="2025-04-07T19:56:42.176Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.02635875">
        <testcase classname="src/presentation/pages/Settings.test.tsx" name="Settings &gt; renders with neural precision" time="0.00988375">
        </testcase>
        <testcase classname="src/presentation/pages/Settings.test.tsx" name="Settings &gt; responds to user interaction with quantum precision" time="0.015594542">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/BiometricMonitorPanel.test.tsx" timestamp="2025-04-07T19:56:42.176Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.002880334">
        <testcase classname="src/presentation/organisms/BiometricMonitorPanel.test.tsx" name="BiometricMonitorPanel (Minimal) &gt; exists as a module" time="0.001858292">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/BrainModelContainer.minimal.spec.tsx" timestamp="2025-04-07T19:56:42.176Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.024230958">
        <testcase classname="src/presentation/organisms/BrainModelContainer.minimal.spec.tsx" name="BrainModelContainer Minimal Test &gt; renders the mocked container with neural precision" time="0.0221185">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
            <system-err>
Warning: React does not recognize the `patientId` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `patientid` instead. If you accidentally passed it from a parent component, remove it from the DOM element.
    at div
    at default
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/BrainModelContainer.minimal.test.tsx" timestamp="2025-04-07T19:56:42.177Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.025568833">
        <testcase classname="src/presentation/organisms/BrainModelContainer.minimal.test.tsx" name="BrainModelContainer &gt; renders with neural precision" time="0.00351325">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/BrainModelContainer.minimal.test.tsx" name="BrainModelContainer &gt; responds to user interaction with quantum precision" time="0.018939292">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/BrainModelContainer.test.tsx" timestamp="2025-04-07T19:56:42.177Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.022889667">
        <testcase classname="src/presentation/organisms/BrainModelContainer.test.tsx" name="BrainModelContainer &gt; renders the container and mock children without crashing" time="0.020597959">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/ClinicalMetricsPanel.test.tsx" timestamp="2025-04-07T19:56:42.177Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.142028875">
        <testcase classname="src/presentation/organisms/ClinicalMetricsPanel.test.tsx" name="ClinicalMetricsPanel &gt; renders metrics tabs and activity content when data is provided" time="0.051870417">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/ClinicalMetricsPanel.test.tsx" name="ClinicalMetricsPanel &gt; applies custom class name with mathematical precision" time="0.088042792">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/ClinicalTimelinePanel.test.tsx" timestamp="2025-04-07T19:56:42.177Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.002401875">
        <testcase classname="src/presentation/organisms/ClinicalTimelinePanel.test.tsx" name="ClinicalTimelinePanel (Minimal) &gt; exists as a module" time="0.00159425">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/NeuralControlPanel.test.tsx" timestamp="2025-04-07T19:56:42.177Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.17029475">
        <testcase classname="src/presentation/organisms/NeuralControlPanel.test.tsx" name="NeuralControlPanel &gt; renders with neural precision" time="0.034686459">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/NeuralControlPanel.test.tsx" name="NeuralControlPanel &gt; responds to user interaction with quantum precision" time="0.133508708">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/RiskAssessmentPanel.test.tsx" timestamp="2025-04-07T19:56:42.178Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.056226667">
        <testcase classname="src/presentation/organisms/RiskAssessmentPanel.test.tsx" name="RiskAssessmentPanel &gt; renders with neural precision" time="0.00590175">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/RiskAssessmentPanel.test.tsx" name="RiskAssessmentPanel &gt; responds to user interaction with quantum precision" time="0.047907334">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/TreatmentResponsePredictor.test.tsx" timestamp="2025-04-07T19:56:42.178Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.064690667">
        <testcase classname="src/presentation/organisms/TreatmentResponsePredictor.test.tsx" name="TreatmentResponsePredictor &gt; renders with neural precision" time="0.00711775">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/TreatmentResponsePredictor.test.tsx" name="TreatmentResponsePredictor &gt; responds to user interaction with quantum precision" time="0.055231416">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/templates/AuthRoute.test.tsx" timestamp="2025-04-07T19:56:42.178Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.026810625">
        <testcase classname="src/presentation/templates/AuthRoute.test.tsx" name="AuthRoute &gt; renders Outlet when authenticated" time="0.0032275">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/templates/AuthRoute.test.tsx" name="AuthRoute &gt; renders Navigate to /login when not authenticated" time="0.021320333">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/templates/ErrorBoundary.test.tsx" timestamp="2025-04-07T19:56:42.179Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.017102417">
        <testcase classname="src/presentation/templates/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; renders with neural precision" time="0.003011584">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/templates/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; responds to user interaction with quantum precision" time="0.01194925">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/templates/MainLayout.test.tsx" timestamp="2025-04-07T19:56:42.179Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.110048375">
        <testcase classname="src/presentation/templates/MainLayout.test.tsx" name="MainLayout &gt; renders with neural precision" time="0.007559959">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/templates/MainLayout.test.tsx" name="MainLayout &gt; responds to user interaction with quantum precision" time="0.100402417">
            <system-out>
[ThemeProvider] applyTheme called with: light

[ThemeProvider] applyTheme called with: dark

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/BiometricAlertVisualizer.test.tsx" timestamp="2025-04-07T19:56:42.180Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.088628875">
        <testcase classname="src/presentation/molecules/BiometricAlertVisualizer.test.tsx" name="BiometricAlertVisualizer &gt; renders alerts based on props" time="0.012525708">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/BiometricAlertVisualizer.test.tsx" name="BiometricAlertVisualizer &gt; renders acknowledged alerts when showAcknowledged is true" time="0.073774083">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
            <system-err>
Warning: The tag &lt;group&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at group
    at BiometricAlertVisualizer (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/molecules/BiometricAlertVisualizer.tsx:53:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/BrainRegionDetails.test.tsx" timestamp="2025-04-07T19:56:42.180Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.001513334">
        <testcase classname="src/presentation/molecules/BrainRegionDetails.test.tsx" name="BrainRegionDetails (Minimal) &gt; exists as a module" time="0.000525375">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/BrainRegionSelector.test.tsx" timestamp="2025-04-07T19:56:42.180Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.022872583">
        <testcase classname="src/presentation/molecules/BrainRegionSelector.test.tsx" name="BrainRegionSelector &gt; renders with clinical precision" time="0.021620292">
            <system-err>
Warning: React does not recognize the `selectedRegionId` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `selectedregionid` instead. If you accidentally passed it from a parent component, remove it from the DOM element.
    at div
    at BrainRegionSelector (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/molecules/BrainRegionSelector.tsx:3:3)
Warning: Unknown event handler property `onSelectRegion`. It will be ignored.
    at div
    at BrainRegionSelector (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/molecules/BrainRegionSelector.tsx:3:3)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/BrainVisualizationControls.test.tsx" timestamp="2025-04-07T19:56:42.181Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.081739458">
        <testcase classname="src/presentation/molecules/BrainVisualizationControls.test.tsx" name="BrainVisualizationControls &gt; renders controls correctly" time="0.079570916">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/Chart.test.tsx" timestamp="2025-04-07T19:56:42.181Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.030971958">
        <testcase classname="src/presentation/molecules/Chart.test.tsx" name="Chart &gt; renders with neural precision" time="0.003604417">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/Chart.test.tsx" name="Chart &gt; responds to user interaction with quantum precision" time="0.025276833">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/ClinicalDataOverlay.test.tsx" timestamp="2025-04-07T19:56:42.181Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.051924583">
        <testcase classname="src/presentation/molecules/ClinicalDataOverlay.test.tsx" name="ClinicalDataOverlay &gt; renders with neural precision" time="0.003597208">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/ClinicalDataOverlay.test.tsx" name="ClinicalDataOverlay &gt; responds to user interaction with quantum precision" time="0.045474625">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/ClinicalMetricsCard.test.tsx" timestamp="2025-04-07T19:56:42.181Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.017116208">
        <testcase classname="src/presentation/molecules/ClinicalMetricsCard.test.tsx" name="ClinicalMetricCard &gt; renders with neural precision" time="0.00237325">
        </testcase>
        <testcase classname="src/presentation/molecules/ClinicalMetricsCard.test.tsx" name="ClinicalMetricCard &gt; responds to user interaction with quantum precision" time="0.013805042">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/Header.test.tsx" timestamp="2025-04-07T19:56:42.182Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.019383708">
        <testcase classname="src/presentation/molecules/Header.test.tsx" name="Header &gt; renders with neural precision" time="0.003322084">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/Header.test.tsx" name="Header &gt; responds to user interaction with quantum precision" time="0.013375084">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/PatientHeader.test.tsx" timestamp="2025-04-07T19:56:42.182Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.054011458">
        <testcase classname="src/presentation/molecules/PatientHeader.test.tsx" name="PatientHeader &gt; renders with neural precision" time="0.011684584">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/PatientHeader.test.tsx" name="PatientHeader &gt; responds to user interaction with quantum precision" time="0.041411084">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/RegionSelectionPanel.test.tsx" timestamp="2025-04-07T19:56:42.182Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.058125291">
        <testcase classname="src/presentation/molecules/RegionSelectionPanel.test.tsx" name="RegionSelectionPanel &gt; renders with neural precision" time="0.004531208">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/RegionSelectionPanel.test.tsx" name="RegionSelectionPanel &gt; responds to user interaction with quantum precision" time="0.0514225">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/SymptomRegionMappingVisualizer.test.tsx" timestamp="2025-04-07T19:56:42.182Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.0750885">
        <testcase classname="src/presentation/molecules/SymptomRegionMappingVisualizer.test.tsx" name="SymptomRegionMappingVisualizer &gt; renders connections for active symptoms" time="0.00804175">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/SymptomRegionMappingVisualizer.test.tsx" name="SymptomRegionMappingVisualizer &gt; renders all connections when showAllConnections is true" time="0.002703667">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/SymptomRegionMappingVisualizer.test.tsx" name="SymptomRegionMappingVisualizer &gt; does not render labels when showSymptomLabels is false" time="0.061622875">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
            <system-err>
Warning: The tag &lt;group&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at group
    at SymptomRegionMappingVisualizer (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/presentation/molecules/SymptomRegionMappingVisualizer.tsx:141:3)
    at ThemeProvider (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/application/providers/ThemeProvider.tsx:19:3)
    at QueryClientProvider (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:20:3)
    at Router (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:5513:13)
    at BrowserRouter (file:///Users/ray/Desktop/GITHUB/Novamind-Frontend/node_modules/react-router/dist/development/chunk-KNED5TY2.mjs:7797:3)
    at AllProviders (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:76:3)
    at Wrapper (/Users/ray/Desktop/GITHUB/Novamind-Frontend/src/test/test-utils.unified.tsx:108:22)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/TherapeuticTimelineVisualizer.test.tsx" timestamp="2025-04-07T19:56:42.183Z" hostname="MacBookPro" tests="1" failures="0" errors="0" skipped="0" time="0.015912833">
        <testcase classname="src/presentation/molecules/TherapeuticTimelineVisualizer.test.tsx" name="TherapeuticTimelineVisualizer &gt; renders with clinical precision" time="0.015128958">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/TimelineEvent.test.tsx" timestamp="2025-04-07T19:56:42.183Z" hostname="MacBookPro" tests="10" failures="0" errors="0" skipped="0" time="0.118425208">
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; renders symptom event with correct title and severity badge" time="0.005294291">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; renders medication event with correct dosage information" time="0.004231625">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; shows expanded content when selected" time="0.010148625">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; displays neural correlation when showNeuralCorrelation is true" time="0.005289167">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; hides neural correlation when showNeuralCorrelation is false" time="0.020809459">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; calls onClick handler when clicked" time="0.005754667">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; applies custom color class when provided" time="0.003768042">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; shows time by default and formats it correctly" time="0.004088292">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; hides time when showTime is false" time="0.040529791">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/TimelineEvent.test.tsx" name="TimelineEvent &gt; applies selection highlight when isSelected is true" time="0.017281291">
            <system-out>
WebGL mocks set up

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/VisualizationControls.test.tsx" timestamp="2025-04-07T19:56:42.184Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.128868791">
        <testcase classname="src/presentation/molecules/VisualizationControls.test.tsx" name="VisualizationControls &gt; renders with neural precision" time="0.002941333">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/molecules/VisualizationControls.test.tsx" name="VisualizationControls &gt; responds to user interaction with quantum precision" time="0.123632958">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/molecules/index.test.ts" timestamp="2025-04-07T19:56:42.186Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.002365167">
        <testcase classname="src/presentation/molecules/index.test.ts" name="index &gt; processes data with mathematical precision" time="0.000232333">
        </testcase>
        <testcase classname="src/presentation/molecules/index.test.ts" name="index &gt; handles edge cases with clinical precision" time="0.000916833">
        </testcase>
    </testsuite>
    <testsuite name="src/test/examples/tailwind-enhanced.test.tsx" timestamp="2025-04-07T19:56:42.188Z" hostname="MacBookPro" tests="5" failures="0" errors="0" skipped="0" time="0.034835208">
        <testcase classname="src/test/examples/tailwind-enhanced.test.tsx" name="Card Component with Tailwind CSS &gt; renders with correct base classes in light mode" time="0.004134625">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/examples/tailwind-enhanced.test.tsx" name="Card Component with Tailwind CSS &gt; renders with dark mode classes when dark mode is enabled" time="0.002653625">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/examples/tailwind-enhanced.test.tsx" name="Card Component with Tailwind CSS &gt; applies secondary variant classes correctly" time="0.019227417">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/examples/tailwind-enhanced.test.tsx" name="Card Component with Tailwind CSS &gt; applies custom className alongside Tailwind classes" time="0.003841084">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/test/examples/tailwind-enhanced.test.tsx" name="Card Component with Tailwind CSS &gt; toggles between light and dark mode" time="0.002641167">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/test/webgl/mock-webgl.test.ts" timestamp="2025-04-07T19:56:42.189Z" hostname="MacBookPro" tests="6" failures="0" errors="0" skipped="5" time="0.003265208">
        <testcase classname="src/test/webgl/mock-webgl.test.ts" name="WebGL Mocking &gt; should mock WebGL context successfully" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/mock-webgl.test.ts" name="WebGL Mocking &gt; should mock WebGL2 context successfully" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/mock-webgl.test.ts" name="WebGL Mocking &gt; should mock animation frame APIs" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/mock-webgl.test.ts" name="WebGL Mocking &gt; should create Three.js mock objects" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/mock-webgl.test.ts" name="WebGL Mocking &gt; should handle matchMedia for responsive testing" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/mock-webgl.test.ts" name="Three.js Component Integration &gt; should handle Three.js component rendering without hanging" time="0.0023605">
        </testcase>
    </testsuite>
    <testsuite name="src/test/webgl/three-mocks.test.ts" timestamp="2025-04-07T19:56:42.190Z" hostname="MacBookPro" tests="6" failures="0" errors="0" skipped="0" time="0.007627417">
        <testcase classname="src/test/webgl/three-mocks.test.ts" name="Three.js Mocking &gt; should create a basic Three.js scene" time="0.000443291">
        </testcase>
        <testcase classname="src/test/webgl/three-mocks.test.ts" name="Three.js Mocking &gt; should handle cleanup and memory management" time="0.000547834">
        </testcase>
        <testcase classname="src/test/webgl/three-mocks.test.ts" name="Three.js Mocking &gt; should handle parent-child relationships correctly" time="0.000665208">
        </testcase>
        <testcase classname="src/test/webgl/three-mocks.test.ts" name="Three.js Mocking &gt; should support traversal of object hierarchies" time="0.002156459">
        </testcase>
        <testcase classname="src/test/webgl/three-mocks.test.ts" name="Three.js Renderer Mocking &gt; should handle rendering without errors" time="0.000668334">
        </testcase>
        <testcase classname="src/test/webgl/three-mocks.test.ts" name="Three.js Renderer Mocking &gt; should support renderer configuration" time="0.002170625">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/models/brain/brain-model.runtime.test.ts" timestamp="2025-04-07T19:56:42.190Z" hostname="MacBookPro" tests="10" failures="0" errors="0" skipped="0" time="0.004060334">
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainRegionValidator &gt; validates valid BrainRegion objects" time="0.000094791">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainRegionValidator &gt; rejects invalid BrainRegion objects" time="0.000096167">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainRegionValidator &gt; normalizes partial BrainRegion objects" time="0.000270625">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; NeuralConnectionValidator &gt; validates valid NeuralConnection objects" time="0.000188125">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; NeuralConnectionValidator &gt; rejects invalid NeuralConnection objects" time="0.000104292">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; NeuralConnectionValidator &gt; normalizes partial NeuralConnection objects" time="0.000104667">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainModelValidator &gt; validates valid BrainModel objects" time="0.000261583">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainModelValidator &gt; rejects invalid BrainModel objects" time="0.000301541">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainModelValidator &gt; normalizes partial BrainModel objects" time="0.000267709">
        </testcase>
        <testcase classname="src/domain/models/brain/brain-model.runtime.test.ts" name="Brain Model Runtime Validators &gt; BrainModelValidator &gt; normalizes model with partial regions and connections" time="0.001229834">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/models/clinical/patient-model.runtime.test.ts" timestamp="2025-04-07T19:56:42.191Z" hostname="MacBookPro" tests="19" failures="0" errors="0" skipped="0" time="0.004803042">
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientDemographicsValidator &gt; validates valid PatientDemographics objects" time="0.000058125">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientDemographicsValidator &gt; rejects invalid PatientDemographics objects" time="0.00008075">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientDemographicsValidator &gt; normalizes partial PatientDemographics objects" time="0.000118833">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; ClinicalHistoryValidator &gt; validates valid ClinicalHistory objects" time="0.000067042">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; ClinicalHistoryValidator &gt; rejects invalid ClinicalHistory objects" time="0.00009725">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; ClinicalHistoryValidator &gt; normalizes partial ClinicalHistory objects" time="0.00006125">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; MedicationValidator &gt; validates valid Medication objects" time="0.000063666">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; MedicationValidator &gt; rejects invalid Medication objects" time="0.000063959">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; MedicationValidator &gt; normalizes partial Medication objects" time="0.000082583">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; SymptomValidator &gt; validates valid Symptom objects" time="0.000145833">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; SymptomValidator &gt; rejects invalid Symptom objects" time="0.000225833">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; SymptomValidator &gt; normalizes partial Symptom objects" time="0.001035084">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; TreatmentResponseValidator &gt; validates valid TreatmentResponse objects" time="0.000104708">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; TreatmentResponseValidator &gt; rejects invalid TreatmentResponse objects" time="0.000110834">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; TreatmentResponseValidator &gt; normalizes partial TreatmentResponse objects" time="0.000180125">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientModelValidator &gt; validates valid PatientModel objects" time="0.000266875">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientModelValidator &gt; rejects invalid PatientModel objects" time="0.000108958">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientModelValidator &gt; normalizes partial PatientModel objects" time="0.00043025">
        </testcase>
        <testcase classname="src/domain/models/clinical/patient-model.runtime.test.ts" name="Patient Model Runtime Validators &gt; PatientModelValidator &gt; normalizes model with partial nested objects" time="0.000256709">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/models/shared/type-verification.runtime.test.ts" timestamp="2025-04-07T19:56:42.192Z" hostname="MacBookPro" tests="36" failures="0" errors="0" skipped="0" time="0.007018375">
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="TypeVerificationError &gt; formats error message with property path" time="0.000067209">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="TypeVerificationError &gt; formats error message without property path" time="0.000087333">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="TypeVerificationError &gt; handles different value types correctly" time="0.000129291">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertDefined &gt; passes for defined values" time="0.000372291">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertDefined &gt; throws for undefined values" time="0.000193417">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertPresent &gt; passes for present values" time="0.000153958">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertPresent &gt; throws for null or undefined values" time="0.000074125">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertString &gt; passes for strings" time="0.000099125">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertString &gt; throws for non-strings" time="0.00024975">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertNumber &gt; passes for numbers" time="0.000396417">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Assertion functions &gt; assertNumber &gt; throws for non-numbers" time="0.00022375">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateDefined &gt; returns true for defined values" time="0.000061708">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateDefined &gt; returns false for undefined values" time="0.000063083">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validatePresent &gt; returns true for present values" time="0.00005275">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validatePresent &gt; returns false for null or undefined values" time="0.00007225">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateString &gt; returns true for strings" time="0.000041">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateString &gt; returns false for non-strings" time="0.0001105">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateArrayOf &gt; validates arrays with valid elements" time="0.000060208">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateArrayOf &gt; rejects arrays with invalid elements" time="0.000067541">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateArrayOf &gt; rejects non-arrays" time="0.000083208">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateProperty &gt; validates object properties" time="0.000066125">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateProperty &gt; rejects invalid properties" time="0.000041917">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateProperty &gt; rejects missing properties" time="0.000072875">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateProperty &gt; rejects non-objects" time="0.00015075">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateOneOf &gt; validates values from allowed set" time="0.000053958">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; validateOneOf &gt; rejects values not in allowed set" time="0.000066875">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Validation functions &gt; createObjectValidator &gt; creates a validator for an object type" time="0.000235084">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asString &gt; converts values to strings" time="0.000082167">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asString &gt; returns undefined for null/undefined" time="0.000093542">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asNumber &gt; converts valid values to numbers" time="0.000215125">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asNumber &gt; returns undefined for invalid numbers" time="0.000087667">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asBoolean &gt; converts boolean values" time="0.000205833">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asBoolean &gt; converts string and number values to booleans" time="0.000114875">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asBoolean &gt; returns undefined for invalid values" time="0.0002455">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asDate &gt; converts valid values to dates" time="0.000349916">
        </testcase>
        <testcase classname="src/domain/models/shared/type-verification.runtime.test.ts" name="Type conversion functions &gt; asDate &gt; returns undefined for invalid dates" time="0.0007725">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/brain/brain-model.service.runtime.test.ts" timestamp="2025-04-07T19:56:42.194Z" hostname="MacBookPro" tests="26" failures="0" errors="0" skipped="0" time="0.005247875">
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isBrainModel &gt; returns true for valid BrainModel objects" time="0.000036042">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isBrainModel &gt; returns false for non-object values" time="0.000066042">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isBrainModel &gt; returns false for objects missing required properties" time="0.000137584">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainModel &gt; returns success for valid BrainModel objects" time="0.00010775">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainModel &gt; returns failure for non-object values" time="0.000167375">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainModel &gt; returns failure for objects with invalid regions" time="0.000053791">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainModel &gt; returns failure for objects with invalid connections" time="0.000143875">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainModel &gt; returns failure for objects with invalid scan" time="0.000130333">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainModel &gt; includes the field path in error messages when provided" time="0.0000465">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isBrainRegion &gt; returns true for valid BrainRegion objects" time="0.000031958">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isBrainRegion &gt; returns false for non-object values" time="0.000057292">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isBrainRegion &gt; returns false for objects missing required properties" time="0.000153083">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainRegion &gt; returns success for valid BrainRegion objects" time="0.000442208">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainRegion &gt; returns failure for non-object values" time="0.000137333">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainRegion &gt; returns failure for objects with invalid activityLevel" time="0.000896833">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainRegion &gt; returns failure for objects with invalid hemisphereLocation" time="0.000122625">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateBrainRegion &gt; includes the field path in error messages when provided" time="0.000144417">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isNeuralConnection &gt; returns true for valid NeuralConnection objects" time="0.000097667">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isNeuralConnection &gt; returns false for non-object values" time="0.000084167">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; isNeuralConnection &gt; returns false for objects missing required properties" time="0.000171625">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateNeuralConnection &gt; returns success for valid NeuralConnection objects" time="0.000162625">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateNeuralConnection &gt; returns failure for non-object values" time="0.000053584">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateNeuralConnection &gt; returns failure for objects with invalid strength" time="0.000053833">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateNeuralConnection &gt; returns failure for objects with invalid type" time="0.000250666">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateNeuralConnection &gt; returns failure for objects with invalid directionality" time="0.000119375">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.runtime.test.ts" name="BrainModelService Runtime Validation &gt; validateNeuralConnection &gt; includes the field path in error messages when provided" time="0.00005975">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/brain/brain-model.service.test.ts" timestamp="2025-04-07T19:56:42.196Z" hostname="MacBookPro" tests="9" failures="0" errors="0" skipped="0" time="0.008174459">
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; fetchBrainModel &gt; successfully fetches a brain model by ID" time="0.000665542">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; fetchBrainModel &gt; handles API error responses appropriately" time="0.000136333">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; fetchBrainModel &gt; handles network errors gracefully" time="0.000418625">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; searchBrainModels &gt; performs search with correct parameters" time="0.000722625">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; updateRegion &gt; successfully updates a brain region" time="0.000313625">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; updateConnection &gt; successfully updates a neural connection" time="0.000160542">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; createAnnotation &gt; successfully creates an annotation" time="0.003664083">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; generateModel &gt; successfully initiates model generation" time="0.000554958">
        </testcase>
        <testcase classname="src/application/services/brain/brain-model.service.test.ts" name="Brain Model Service &gt; checkGenerationStatus &gt; retrieves the current generation status" time="0.000225958">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/clinical/clinical.service.minimal.test.ts" timestamp="2025-04-07T19:56:42.197Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="0" time="0.0052095">
        <testcase classname="src/application/services/clinical/clinical.service.minimal.test.ts" name="clinicalService &gt; fetchSymptomMappings &gt; fetches neural mappings with psychiatric precision" time="0.000535958">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.minimal.test.ts" name="clinicalService &gt; fetchRiskAssessment &gt; fetches patient risk assessment with HIPAA compliance" time="0.000644333">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.minimal.test.ts" name="clinicalService &gt; updateSymptom &gt; updates symptom with clinical precision" time="0.000231125">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.minimal.test.ts" name="clinicalService &gt; generateTemporalProjections &gt; generates precise temporal projections for treatment response" time="0.002754334">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/clinical/clinical.service.runtime.test.ts" timestamp="2025-04-07T19:56:42.197Z" hostname="MacBookPro" tests="27" failures="0" errors="0" skipped="0" time="0.004887667">
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isSymptom &gt; returns true for valid Symptom objects" time="0.00004825">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isSymptom &gt; returns false for non-object values" time="0.000220833">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isSymptom &gt; returns false for objects missing required properties" time="0.000081791">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateSymptom &gt; returns success for valid Symptom objects" time="0.000050209">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateSymptom &gt; returns failure for non-object values" time="0.000069167">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateSymptom &gt; returns failure for objects with invalid severity" time="0.000105958">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateSymptom &gt; returns failure for objects with invalid onset date" time="0.000058208">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateSymptom &gt; includes the field path in error messages when provided" time="0.000046375">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isDiagnosis &gt; returns true for valid Diagnosis objects" time="0.000034084">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isDiagnosis &gt; returns false for non-object values" time="0.000059833">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isDiagnosis &gt; returns false for objects missing required properties" time="0.000047458">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateDiagnosis &gt; returns success for valid Diagnosis objects" time="0.000048083">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateDiagnosis &gt; returns failure for objects with invalid severity" time="0.000053083">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateDiagnosis &gt; returns failure for objects with invalid status" time="0.00008925">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isTreatment &gt; returns true for valid Treatment objects" time="0.00012075">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isTreatment &gt; returns false for non-object values" time="0.000178417">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateTreatment &gt; returns success for valid Treatment objects" time="0.000050375">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateTreatment &gt; returns success for valid Treatment with endDate" time="0.000050125">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateTreatment &gt; returns failure for objects with invalid endDate" time="0.000102292">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isRiskAssessment &gt; returns true for valid RiskAssessment objects" time="0.000044792">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isRiskAssessment &gt; returns false for non-object values" time="0.000080834">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateRiskAssessment &gt; returns success for valid RiskAssessment objects" time="0.000101291">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateRiskAssessment &gt; returns failure for objects with invalid risk level" time="0.0002055">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isTreatmentResponsePrediction &gt; returns true for valid TreatmentResponsePrediction objects" time="0.000137667">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; isTreatmentResponsePrediction &gt; returns false for non-object values" time="0.000773875">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateTreatmentResponsePrediction &gt; returns success for valid TreatmentResponsePrediction objects" time="0.000324167">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.runtime.test.ts" name="ClinicalService Runtime Validation &gt; validateTreatmentResponsePrediction &gt; returns failure for objects with invalid timeToEffect" time="0.000308292">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/clinical/clinical.service.test.ts" timestamp="2025-04-07T19:56:42.199Z" hostname="MacBookPro" tests="11" failures="0" errors="0" skipped="0" time="0.0076375">
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchSymptomMappings &gt; successfully fetches symptom neural mappings" time="0.000256208">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchSymptomMappings &gt; handles API error responses appropriately" time="0.000308042">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchDiagnosisMappings &gt; successfully fetches diagnosis neural mappings" time="0.000316958">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchTreatmentMappings &gt; successfully fetches treatment neural mappings" time="0.000385875">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchRiskAssessment &gt; successfully fetches patient risk assessment" time="0.000470792">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchRiskAssessment &gt; handles patient not found errors" time="0.000370833">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchTreatmentPredictions &gt; successfully fetches treatment response predictions" time="0.000533458">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; fetchPatientSymptoms &gt; successfully fetches patient symptoms" time="0.000173417">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; updateSymptom &gt; successfully updates a patient symptom" time="0.000275833">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; generateAlgorithmExplanation &gt; successfully generates an algorithm explanation" time="0.000396125">
        </testcase>
        <testcase classname="src/application/services/clinical/clinical.service.test.ts" name="Clinical Service &gt; generateTemporalProjections &gt; successfully generates temporal projections" time="0.0026145">
        </testcase>
    </testsuite>
    <testsuite name="src/application/services/clinical/risk-assessment.service.test.ts" timestamp="2025-04-07T19:56:42.203Z" hostname="MacBookPro" tests="13" failures="0" errors="0" skipped="0" time="0.004372625">
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateDepressionRiskLevel &gt; correctly calculates critical risk level" time="0.000780542">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateDepressionRiskLevel &gt; correctly calculates high risk level" time="0.000078583">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateDepressionRiskLevel &gt; correctly calculates moderate risk level" time="0.000097458">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateDepressionRiskLevel &gt; correctly calculates low risk level" time="0.000067125">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateDepressionRiskLevel &gt; correctly calculates minimal risk level" time="0.000206375">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateAnxietyRiskLevel &gt; correctly calculates critical risk level" time="0.000063292">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateAnxietyRiskLevel &gt; correctly calculates high risk level" time="0.000050667">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateAnxietyRiskLevel &gt; correctly calculates moderate risk level" time="0.000083167">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateOverallRiskLevel &gt; correctly calculates critical overall risk" time="0.000099417">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateOverallRiskLevel &gt; correctly calculates high overall risk" time="0.000151459">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateOverallRiskLevel &gt; correctly calculates moderate overall risk" time="0.001142875">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateOverallRiskLevel &gt; correctly weighs risk factors" time="0.000195833">
        </testcase>
        <testcase classname="src/application/services/clinical/risk-assessment.service.test.ts" name="RiskAssessmentService &gt; calculateOverallRiskLevel &gt; correctly accounts for social support as a protective factor" time="0.000062959">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/brain/type-verification.test.ts" timestamp="2025-04-07T19:56:42.205Z" hostname="MacBookPro" tests="27" failures="0" errors="0" skipped="0" time="0.006704375">
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyVector3 &gt; verifies valid Vector3 objects" time="0.000108416">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyVector3 &gt; fails on non-object values" time="0.000092583">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyVector3 &gt; fails when coordinates are not numbers" time="0.000168875">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyVector3 &gt; fails when coordinates are missing" time="0.000275875">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; safelyParseVector3 &gt; returns Vector3 for valid objects" time="0.0000505">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; safelyParseVector3 &gt; converts string or non-numeric values" time="0.000177083">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; safelyParseVector3 &gt; uses fallback for missing values" time="0.000065375">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; safelyParseVector3 &gt; returns fallback for non-object values" time="0.00007875">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyRenderMode &gt; verifies valid RenderMode values" time="0.000048416">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyRenderMode &gt; fails on invalid RenderMode values" time="0.00008575">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainRegion &gt; verifies valid BrainRegion objects" time="0.000404209">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainRegion &gt; accepts optional properties" time="0.000165834">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainRegion &gt; fails when required properties are missing" time="0.000405375">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainRegion &gt; fails when properties have wrong types" time="0.000201959">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyNeuralConnection &gt; verifies valid NeuralConnection objects" time="0.000467917">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyNeuralConnection &gt; accepts optional properties" time="0.000107792">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyNeuralConnection &gt; fails when required properties are missing" time="0.000922458">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainModel &gt; verifies valid BrainModel objects" time="0.000322583">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainModel &gt; accepts optional properties" time="0.000098875">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainModel &gt; fails when required properties are missing" time="0.000072542">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; verifyBrainModel &gt; fails when arrays contain invalid items" time="0.000181375">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; assertion functions &gt; assertVector3 passes for valid Vector3" time="0.000079291">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; assertion functions &gt; assertVector3 throws for invalid Vector3" time="0.000052042">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; assertion functions &gt; assertRenderMode passes for valid RenderMode" time="0.000067708">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; assertion functions &gt; assertRenderMode throws for invalid RenderMode" time="0.000170209">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; assertion functions &gt; assertBrainRegion passes for valid BrainRegion" time="0.00035825">
        </testcase>
        <testcase classname="src/domain/utils/brain/type-verification.test.ts" name="Brain type verification &gt; assertion functions &gt; assertBrainRegion throws for invalid BrainRegion" time="0.00005625">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/clinical/type-verification.test.ts" timestamp="2025-04-07T19:56:42.206Z" hostname="MacBookPro" tests="29" failures="0" errors="0" skipped="0" time="0.009397083">
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyRiskLevel &gt; verifies valid RiskLevel values" time="0.000197417">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyRiskLevel &gt; fails on invalid RiskLevel values" time="0.0001365">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifySymptom &gt; verifies valid Symptom objects" time="0.000116125">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifySymptom &gt; accepts optional properties" time="0.000246334">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifySymptom &gt; fails when required properties are missing" time="0.000046542">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifySymptom &gt; fails when properties have wrong types" time="0.000055833">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyDiagnosis &gt; verifies valid Diagnosis objects" time="0.000103">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyDiagnosis &gt; accepts optional properties" time="0.000126541">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyDiagnosis &gt; fails when required properties are missing" time="0.000063334">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyDiagnosis &gt; verifies valid string date for diagnosisDate" time="0.000045542">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyDiagnosis &gt; fails when diagnosisDate is not a string" time="0.000068416">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatment &gt; verifies valid Treatment objects" time="0.0001165">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatment &gt; accepts optional properties" time="0.000516834">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatment &gt; fails when required properties are missing" time="0.000234458">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatmentResponse &gt; verifies valid TreatmentResponse objects" time="0.00059575">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatmentResponse &gt; accepts optional properties" time="0.000407625">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatmentResponse &gt; fails when required properties are missing" time="0.000148416">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyTreatmentResponse &gt; fails when date is not a Date object" time="0.000828958">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyPatient &gt; verifies valid Patient objects" time="0.000530083">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyPatient &gt; accepts optional properties" time="0.000137958">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyPatient &gt; verifies arrays of clinical data" time="0.001534792">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyPatient &gt; fails when required properties are missing" time="0.000111292">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; verifyPatient &gt; fails when arrays contain invalid items" time="0.000089667">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; assertion functions &gt; assertRiskLevel passes for valid RiskLevel" time="0.000080333">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; assertion functions &gt; assertRiskLevel throws for invalid RiskLevel" time="0.000073166">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; assertion functions &gt; assertSymptom passes for valid Symptom" time="0.000077">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; assertion functions &gt; assertSymptom throws for invalid Symptom" time="0.000693916">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; assertion functions &gt; assertPatient passes for valid Patient" time="0.000460042">
        </testcase>
        <testcase classname="src/domain/utils/clinical/type-verification.test.ts" name="Clinical type verification &gt; assertion functions &gt; assertPatient throws for invalid Patient" time="0.000097208">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/utils/shared/type-verification.test.ts" timestamp="2025-04-07T19:56:42.209Z" hostname="MacBookPro" tests="36" failures="0" errors="0" skipped="0" time="0.005856583">
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; TypeVerificationError &gt; formats error message correctly" time="0.000141292">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseNumber &gt; returns number for numeric values" time="0.000040166">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseNumber &gt; parses numeric strings" time="0.000041292">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseNumber &gt; converts boolean values" time="0.00004025">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseNumber &gt; returns fallback for non-numeric values" time="0.000081292">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseBoolean &gt; returns boolean for boolean values" time="0.000039084">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseBoolean &gt; parses string representations" time="0.000075625">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseBoolean &gt; parses numeric values" time="0.000040334">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseBoolean &gt; returns fallback for non-boolean values" time="0.00008025">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseString &gt; returns string for string values" time="0.000040375">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseString &gt; converts non-string values to strings" time="0.000049334">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; safelyParseString &gt; returns fallback for null/undefined" time="0.000057334">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyString &gt; verifies valid strings" time="0.000132333">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyString &gt; fails on non-string values" time="0.000202541">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyString &gt; includes field name in error when provided" time="0.000155334">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyNumber &gt; verifies valid numbers" time="0.000042292">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyNumber &gt; fails on non-number values" time="0.000089833">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyNumber &gt; fails on NaN" time="0.000041209">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyBoolean &gt; verifies valid booleans" time="0.000059791">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyBoolean &gt; fails on non-boolean values" time="0.000098083">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyArray &gt; verifies valid arrays" time="0.000062917">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyArray &gt; fails on non-array values" time="0.000091958">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyArray &gt; verifies array items with provided verifier" time="0.000074417">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyArray &gt; fails when any array item fails verification" time="0.000111416">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyObject &gt; verifies valid objects" time="0.000365208">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; verifyObject &gt; fails on non-object values" time="0.000914958">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertString passes for valid strings" time="0.000223792">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertString throws for non-strings" time="0.000042209">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertNumber passes for valid numbers" time="0.000068625">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertNumber throws for non-numbers" time="0.000041667">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertBoolean passes for valid booleans" time="0.000089042">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertBoolean throws for non-booleans" time="0.000046917">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertArray passes for valid arrays" time="0.00011875">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertArray throws for non-arrays" time="0.000075292">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertObject passes for valid objects" time="0.000411833">
        </testcase>
        <testcase classname="src/domain/utils/shared/type-verification.test.ts" name="Shared type verification &gt; assertion functions &gt; assertObject throws for non-objects" time="0.000074917">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/neural/transforms.runtime.test.ts" timestamp="2025-04-07T19:56:42.211Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="0" time="0.00337975">
        <testcase classname="src/domain/types/neural/transforms.runtime.test.ts" name="Neural Transforms runtime validators &gt; NeuralTransformValidator validates correct NeuralTransform objects" time="0.000323375">
        </testcase>
        <testcase classname="src/domain/types/neural/transforms.runtime.test.ts" name="Neural Transforms runtime validators &gt; NeuralTransformBatchValidator validates correct NeuralTransformBatch objects" time="0.000167167">
        </testcase>
        <testcase classname="src/domain/types/neural/transforms.runtime.test.ts" name="Neural Transforms runtime validators &gt; NeuralTransformSequenceValidator validates correct NeuralTransformSequence objects" time="0.00050425">
        </testcase>
        <testcase classname="src/domain/types/neural/transforms.runtime.test.ts" name="Neural Transforms runtime validators &gt; NeuralTransformResultValidator validates correct NeuralTransformResult objects" time="0.001546333">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/neural/transforms.test.ts" timestamp="2025-04-07T19:56:42.212Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="0" time="0.00698375">
        <testcase classname="src/domain/types/neural/transforms.test.ts" name="transforms type definitions &gt; exports NeuralTransform with correct structure" time="0.000174667">
        </testcase>
        <testcase classname="src/domain/types/neural/transforms.test.ts" name="transforms type definitions &gt; exports NeuralTransformBatch with correct structure" time="0.000083208">
        </testcase>
        <testcase classname="src/domain/types/neural/transforms.test.ts" name="transforms type definitions &gt; exports NeuralTransformSequence with correct structure" time="0.000530667">
        </testcase>
        <testcase classname="src/domain/types/neural/transforms.test.ts" name="transforms type definitions &gt; exports NeuralTransformResult with correct structure" time="0.00489375">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/shared/common.runtime.test.ts" timestamp="2025-04-07T19:56:42.212Z" hostname="MacBookPro" tests="22" failures="0" errors="0" skipped="0" time="0.004505083">
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; IDValidator &gt; validates valid IDs" time="0.000069084">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; IDValidator &gt; rejects invalid IDs" time="0.000190458">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; TimestampedEntityValidator &gt; validates valid TimestampedEntity objects" time="0.0000355">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; TimestampedEntityValidator &gt; rejects invalid TimestampedEntity objects" time="0.000084167">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; UserGeneratedContentValidator &gt; validates valid UserGeneratedContent objects" time="0.000040875">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; UserGeneratedContentValidator &gt; rejects invalid UserGeneratedContent objects" time="0.000070084">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; AuditableValidator &gt; validates valid Auditable objects" time="0.000038834">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; AuditableValidator &gt; rejects invalid Auditable objects" time="0.000073542">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; VersionedEntityValidator &gt; validates valid VersionedEntity objects" time="0.0000395">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; VersionedEntityValidator &gt; rejects invalid VersionedEntity objects" time="0.000081292">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; SortOrderValidator &gt; validates valid SortOrder values" time="0.000037916">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; SortOrderValidator &gt; rejects invalid SortOrder values" time="0.000072417">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; RangeValidator &gt; validates valid Range objects" time="0.000052125">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; RangeValidator &gt; rejects invalid Range objects" time="0.000084375">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; Point2DValidator &gt; validates valid Point2D objects" time="0.0001865">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; Point2DValidator &gt; rejects invalid Point2D objects" time="0.001009541">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; ColorRGBValidator &gt; validates valid ColorRGB objects" time="0.000124291">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; ColorRGBValidator &gt; rejects invalid ColorRGB objects" time="0.000122708">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; ColorRGBAValidator &gt; validates valid ColorRGBA objects" time="0.000139416">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; ColorRGBAValidator &gt; rejects invalid ColorRGBA objects" time="0.000214208">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; DimensionsValidator &gt; validates valid Dimensions objects" time="0.000058625">
        </testcase>
        <testcase classname="src/domain/types/shared/common.runtime.test.ts" name="Common Shared Types runtime validators &gt; DimensionsValidator &gt; rejects invalid Dimensions objects" time="0.000137541">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/brain/activity.test.ts" timestamp="2025-04-07T19:56:42.220Z" hostname="MacBookPro" tests="7" failures="0" errors="0" skipped="0" time="0.002446">
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; exports ActivationLevel with correct structure" time="0.0002685">
        </testcase>
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; can use NeuralActivityState type for activity states" time="0.00007825">
        </testcase>
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; can use NeuralActivationPattern type for activation patterns" time="0.000060166">
        </testcase>
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; can use NeuralStateTransition type for neural transitions" time="0.000155708">
        </testcase>
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; can use TemporalActivationSequence type for sequences" time="0.000581209">
        </testcase>
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; can use NeuralActivityHeatmap type for spatial activity maps" time="0.00019475">
        </testcase>
        <testcase classname="src/domain/types/brain/activity.test.ts" name="activity type definitions &gt; can use ActivityVisualizationSettings type for visualization" time="0.000130875">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/brain/core-models.runtime.test.ts" timestamp="2025-04-07T19:56:42.221Z" hostname="MacBookPro" tests="10" failures="0" errors="0" skipped="0" time="0.003891792">
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; Vector3Validator &gt; validates valid Vector3 objects" time="0.000078333">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; Vector3Validator &gt; rejects invalid Vector3 objects" time="0.00012175">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; CoordinateValidator &gt; validates valid Coordinate objects" time="0.00012025">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; CoordinateValidator &gt; rejects invalid Coordinate objects" time="0.000516041">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; BrainRegionValidator &gt; validates valid BrainRegion objects" time="0.000112583">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; BrainRegionValidator &gt; rejects invalid BrainRegion objects" time="0.000898125">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; ConnectionValidator &gt; validates valid Connection objects" time="0.000124">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; ConnectionValidator &gt; rejects invalid Connection objects" time="0.000242291">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; BrainModelValidator &gt; validates valid BrainModel objects" time="0.000096792">
        </testcase>
        <testcase classname="src/domain/types/brain/core-models.runtime.test.ts" name="Brain Core Models runtime validators &gt; BrainModelValidator &gt; rejects invalid BrainModel objects" time="0.000249166">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/brain/index.test.ts" timestamp="2025-04-07T19:56:42.222Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.001419416">
        <testcase classname="src/domain/types/brain/index.test.ts" name="index &gt; processes data with mathematical precision" time="0.000150375">
        </testcase>
        <testcase classname="src/domain/types/brain/index.test.ts" name="index &gt; handles edge cases with clinical precision" time="0.000579375">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/brain/models.test.ts" timestamp="2025-04-07T19:56:42.223Z" hostname="MacBookPro" tests="8" failures="0" errors="0" skipped="0" time="0.002489625">
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports BrainRegion with correct structure" time="0.000152458">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports NeuralConnection with correct structure" time="0.000081417">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports BrainScan with correct structure" time="0.000076666">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports BrainModel with correct structure" time="0.00007">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports NeuralActivity with correct structure" time="0.000036542">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports ActivityTimeSeries with correct structure" time="0.000821208">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports RegionClinicalData with correct structure" time="0.000184916">
        </testcase>
        <testcase classname="src/domain/types/brain/models.test.ts" name="models type definitions &gt; exports undefined with correct structure" time="0.000086542">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/brain/visualization.runtime.test.ts" timestamp="2025-04-07T19:56:42.224Z" hostname="MacBookPro" tests="9" failures="0" errors="0" skipped="0" time="0.003340709">
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; RenderModeValidator validates correct render modes" time="0.000304667">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; VisualizationSettingsValidator validates correct VisualizationSettings objects" time="0.00012275">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; ThemeOptionValidator validates correct theme options" time="0.000117417">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; ThemeSettingsValidator validates correct ThemeSettings objects" time="0.000284125">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; BrainVisualizationPropsValidator validates correct BrainVisualizationProps objects" time="0.00013125">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; BrainVisualizationStateValidator validates correct BrainVisualizationState objects" time="0.000197542">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; ProcessedBrainDataValidator validates correct ProcessedBrainData objects" time="0.000163375">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; ProcessedBrainRegionValidator validates correct ProcessedBrainRegion objects" time="0.000206791">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.runtime.test.ts" name="Brain Visualization runtime validators &gt; ProcessedNeuralConnectionValidator validates correct ProcessedNeuralConnection objects" time="0.000726375">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/brain/visualization.test.ts" timestamp="2025-04-07T19:56:42.225Z" hostname="MacBookPro" tests="12" failures="0" errors="0" skipped="0" time="0.003339458">
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; exports visualizationThemes with correct structure" time="0.00009475">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; exports defaultVisualizationSettings with correct structure" time="0.000077417">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; exports RenderMode with correct structure" time="0.000077083">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use VisualizationSettings type for settings objects" time="0.000062583">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use ThemeOption type for theme values" time="0.00003775">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use ThemeSettings type for theme configuration" time="0.000828667">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use BrainVisualizationProps type for component props" time="0.000175375">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use BrainVisualizationState type for component states" time="0.000058542">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use ProcessedBrainData type for visualization data" time="0.00035925">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use ProcessedBrainRegion type for region rendering data" time="0.000055458">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; can use ProcessedNeuralConnection type for connection rendering data" time="0.00013375">
        </testcase>
        <testcase classname="src/domain/types/brain/visualization.test.ts" name="visualization type definitions &gt; exports utility functions for type validation" time="0.000289875">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/clinical/patient.runtime.test.ts" timestamp="2025-04-07T19:56:42.226Z" hostname="MacBookPro" tests="5" failures="0" errors="0" skipped="0" time="0.002374708">
        <testcase classname="src/domain/types/clinical/patient.runtime.test.ts" name="Patient runtime validators &gt; PatientValidator validates correct Patient objects" time="0.00025725">
        </testcase>
        <testcase classname="src/domain/types/clinical/patient.runtime.test.ts" name="Patient runtime validators &gt; PatientDemographicsValidator validates correct PatientDemographics objects" time="0.000085709">
        </testcase>
        <testcase classname="src/domain/types/clinical/patient.runtime.test.ts" name="Patient runtime validators &gt; DiagnosisValidator validates correct Diagnosis objects" time="0.000743333">
        </testcase>
        <testcase classname="src/domain/types/clinical/patient.runtime.test.ts" name="Patient runtime validators &gt; SymptomValidator validates correct Symptom objects" time="0.000198334">
        </testcase>
        <testcase classname="src/domain/types/clinical/patient.runtime.test.ts" name="Patient runtime validators &gt; MedicationValidator validates correct Medication objects" time="0.000155333">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/clinical/risk-level.runtime.test.ts" timestamp="2025-04-07T19:56:42.226Z" hostname="MacBookPro" tests="3" failures="0" errors="0" skipped="0" time="0.002492209">
        <testcase classname="src/domain/types/clinical/risk-level.runtime.test.ts" name="Risk Level runtime validators &gt; RiskLevelValidator validates correct risk levels" time="0.00065025">
        </testcase>
        <testcase classname="src/domain/types/clinical/risk-level.runtime.test.ts" name="Risk Level runtime validators &gt; RiskLevelValidator normalizes risk levels correctly" time="0.000277458">
        </testcase>
        <testcase classname="src/domain/types/clinical/risk-level.runtime.test.ts" name="Risk Level runtime validators &gt; RiskLevelValidator returns correct severity levels" time="0.0007495">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/clinical/risk.runtime.test.ts" timestamp="2025-04-07T19:56:42.227Z" hostname="MacBookPro" tests="5" failures="0" errors="0" skipped="0" time="0.002630458">
        <testcase classname="src/domain/types/clinical/risk.runtime.test.ts" name="Risk runtime validators &gt; RiskLevelValidator validates correct RiskLevel values" time="0.000289541">
        </testcase>
        <testcase classname="src/domain/types/clinical/risk.runtime.test.ts" name="Risk runtime validators &gt; RiskAssessmentValidator validates correct RiskAssessment objects" time="0.000339667">
        </testcase>
        <testcase classname="src/domain/types/clinical/risk.runtime.test.ts" name="Risk runtime validators &gt; DomainRiskValidator validates correct DomainRisk objects" time="0.000705917">
        </testcase>
        <testcase classname="src/domain/types/clinical/risk.runtime.test.ts" name="Risk runtime validators &gt; ContributingFactorValidator validates correct ContributingFactor objects" time="0.000234">
        </testcase>
        <testcase classname="src/domain/types/clinical/risk.runtime.test.ts" name="Risk runtime validators &gt; ProtectiveFactorValidator validates correct ProtectiveFactor objects" time="0.000130625">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/types/clinical/treatment.runtime.test.ts" timestamp="2025-04-07T19:56:42.228Z" hostname="MacBookPro" tests="9" failures="0" errors="0" skipped="0" time="0.003103458">
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; TreatmentTypeValidator validates correct treatment types" time="0.000282125">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; TreatmentResponseRequestValidator validates correct TreatmentResponseRequest objects" time="0.000108167">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; TreatmentDetailsValidator validates correct TreatmentDetails objects" time="0.000109292">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; TreatmentDetailsValidator.isValidMedication validates medication details" time="0.000248916">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; ClinicalPredictionDataValidator validates correct ClinicalPredictionData objects" time="0.000153292">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; GeneticPredictionDataValidator validates correct GeneticPredictionData objects" time="0.000135333">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; BiomarkerDataValidator validates correct BiomarkerData objects" time="0.000157125">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; TreatmentResponsePredictionValidator validates correct TreatmentResponsePrediction objects" time="0.000240625">
        </testcase>
        <testcase classname="src/domain/types/clinical/treatment.runtime.test.ts" name="Treatment runtime validators &gt; TreatmentComparisonResultValidator validates correct TreatmentComparisonResult objects" time="0.000709458">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/shaders/shaders/neuralGlow.test.ts" timestamp="2025-04-07T19:56:42.228Z" hostname="MacBookPro" tests="2" failures="0" errors="0" skipped="0" time="0.00204075">
        <testcase classname="src/presentation/shaders/shaders/neuralGlow.test.ts" name="createNeuralGlowUniforms &gt; processes data with mathematical precision" time="0.000258125">
        </testcase>
        <testcase classname="src/presentation/shaders/shaders/neuralGlow.test.ts" name="createNeuralGlowUniforms &gt; handles edge cases with clinical precision" time="0.000949542">
        </testcase>
    </testsuite>
    <testsuite name="src/presentation/organisms/__tests__/BrainVisualizationExample.test.tsx" timestamp="2025-04-07T19:56:42.229Z" hostname="MacBookPro" tests="5" failures="0" errors="0" skipped="0" time="0.036014666">
        <testcase classname="src/presentation/organisms/__tests__/BrainVisualizationExample.test.tsx" name="BrainVisualization Component with WebGL Mocks &gt; renders the brain visualization" time="0.002070166">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/__tests__/BrainVisualizationExample.test.tsx" name="BrainVisualization Component with WebGL Mocks &gt; allows selecting brain regions" time="0.005528292">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/__tests__/BrainVisualizationExample.test.tsx" name="BrainVisualization with runTestWithWebGL utility &gt; renders with different detail levels" time="0.003029875">
            <system-out>
WebGL mocks set up
[ThemeProvider] applyTheme called with: light

WebGL mocks cleaned up

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/__tests__/BrainVisualizationExample.test.tsx" name="BrainVisualization with Neural Controller Mocks &gt; renders with neural activity data" time="0.008826625">
            <system-out>
[ThemeProvider] applyTheme called with: light

            </system-out>
        </testcase>
        <testcase classname="src/presentation/organisms/__tests__/BrainVisualizationExample.test.tsx" name="BrainVisualization Memory Management &gt; properly disposes resources when unmounted" time="0.012629959">
            <system-out>
WebGL mocks set up
[ThemeProvider] applyTheme called with: light

WebGL mocks cleaned up

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/test/webgl/examples/BrainRegionVisualizer.test.ts" timestamp="2025-04-07T19:56:42.230Z" hostname="MacBookPro" tests="4" failures="0" errors="0" skipped="4" time="0">
        <testcase classname="src/test/webgl/examples/BrainRegionVisualizer.test.ts" name="BrainRegionVisualizer &gt; should create all brain regions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/examples/BrainRegionVisualizer.test.ts" name="BrainRegionVisualizer &gt; should highlight a brain region" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/examples/BrainRegionVisualizer.test.ts" name="BrainRegionVisualizer &gt; should render without errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/test/webgl/examples/BrainRegionVisualizer.test.ts" name="BrainRegionVisualizer &gt; should properly clean up resources when disposed" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/domain/models/brain/mapping/brain-mapping.test.ts" timestamp="2025-04-07T19:56:42.230Z" hostname="MacBookPro" tests="5" failures="0" errors="0" skipped="0" time="0.002544625">
        <testcase classname="src/domain/models/brain/mapping/brain-mapping.test.ts" name="calculateNeuralActivation &gt; should calculate activation based on symptoms only" time="0.000183792">
        </testcase>
        <testcase classname="src/domain/models/brain/mapping/brain-mapping.test.ts" name="calculateNeuralActivation &gt; should calculate activation based on diagnoses only" time="0.00009575">
        </testcase>
        <testcase classname="src/domain/models/brain/mapping/brain-mapping.test.ts" name="calculateNeuralActivation &gt; should combine symptom and diagnosis activations quadratically" time="0.000902166">
        </testcase>
        <testcase classname="src/domain/models/brain/mapping/brain-mapping.test.ts" name="calculateNeuralActivation &gt; should return 0 activation if no mappings match" time="0.000210584">
        </testcase>
        <testcase classname="src/domain/models/brain/mapping/brain-mapping.test.ts" name="calculateNeuralActivation &gt; should cap activation at 1.0" time="0.000159084">
        </testcase>
    </testsuite>
</testsuites>
