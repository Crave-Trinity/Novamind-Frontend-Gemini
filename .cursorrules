# Novamind Digital Twin: Documentation Generation Rules
This cursor rules needs to be edited as it right now instructs the LLM to make documentation based on every single file in SRC instead of comprehensively creating documentation which is what we need instead.
## Objective
- Generate comprehensive and accurate Markdown documentation for the current Novamind Digital Twin codebase located in the `src/` directory.
- Place all generated documentation files **directly** within the root of the `docs/` directory, resulting in a **flat file structure**. **Do NOT mirror the `src/` directory structure.**
- Ignore the `docs/legacy/` directory.
- The documentation should reflect the existing code's architecture, components, types, and logic.

## Source Code Context (For Analysis)

### Environment (Reference Only)
```bash
node >= 18.0.0
npm >= 9.0.0
```

### Core Architecture (Reference Only)
- ESM only (type: "module")
- TypeScript only (.ts/.tsx)
- Path aliases used (@domain/...)
- Strict type safety (no `any`)

### Directory Structure (Source for Documentation)
```
src/
├── domain/           # Core business logic (Document entities, value objects, repositories)
├── application/      # Use cases, state (Document services, commands, queries, state management)
├── infrastructure/   # External services (Document adapters, clients, configurations)
└── presentation/     # UI (Atomic Design) (Document components, props, hierarchy)
    ├── atoms/
    ├── molecules/
    ├── organisms/
    ├── templates/
    └── pages/
```

### Documentation Standards
- Use Markdown (`.md`) for all documentation files.
- **Filename Convention:** Use a clear and consistent naming convention for generated `.md` files to prevent collisions and indicate origin: `layer-subpath-filename.md` (e.g., `domain-models-Patient.md`, `presentation-atoms-Button.md`).
- Generate a **single, comprehensive `README.md`** file in the `docs/` root directory. This file will act as a table of contents, listing and linking (using relative paths like `./layer-subpath-filename.md`) to all other generated `.md` files, organized logically (e.g., by source layer).
- Document public APIs, types, and functions using TSDoc conventions within the documentation files where appropriate (extracted or summarized from code).
- Clearly explain the purpose, inputs, outputs, and dependencies of modules and components.
- Include diagrams (e.g., Mermaid syntax in Markdown) to illustrate architecture, data flow, or component relationships where helpful.
- Ensure documentation accurately reflects the *current* state of the code in `src/`.

## Documentation Generation Process

1.  **Analyze Source:** Thoroughly read and understand the TypeScript code within the `src/` subdirectories (`domain`, `application`, `infrastructure`, `presentation`). Ignore test files and configuration files unless critical.
2.  **Prepare Docs Directory:** Ensure the `docs/` directory exists and is ready for a flat structure. **Do not touch `docs/legacy/`.**
3.  **Generate Individual Docs:** For each significant module/class/function/component/type/interface in `src/`:
    *   Create a corresponding `.md` file **directly inside the `docs/` root directory**.
    *   Use the specified **filename convention** (e.g., `presentation-organisms-UserProfile.md`).
    *   Document purpose, API (TSDoc style), dependencies, etc.
4.  **Generate Master README:** Create/overwrite `docs/README.md` with an introduction and a structured, linked table of contents for all generated `.md` files within `docs/`.
5.  **Cross-linking:** Use relative links (`[link text](./target-doc-file.md)`) within the Markdown files to connect related documentation pages *within the flat `docs/` structure*.
6.  **Review and Refine:** Ensure clarity, accuracy, completeness, filename correctness, link validity, and adherence to the flat structure requirement.

## Exclusions
- Do **not** modify any code in the `src/` directory.
- Do **not** create documentation for test files or configuration files unless specifically requested.
- Do **not** place any new files in `docs/legacy/`.
- **Do NOT create any subdirectories within `docs/`.**
- Do **not** perform actions related to building, testing, deploying, or debugging the application. The focus is *solely* on generating documentation based on the existing code.
