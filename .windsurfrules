# React + Tailwind Guidelines: Novamind Brain Visualization

## Component Architecture
- **Atomic Design**: atoms → molecules → organisms → templates → pages
- **Data/UI Separation**: Container components for data, presentation for UI
- **Single Responsibility**: Each component does one thing exceptionally well
- **Large Data Handling**: Use react-window for virtualized rendering
- **Code Splitting**: React.lazy() + Suspense for all visualization components

## Tailwind Implementation
- **No Inline Styles**: Always use Tailwind classes
- **Avoid Arbitrary Values**: Use theme extensions instead of w-[753px]
- **Extract Patterns**: @apply in CSS or create component abstractions
- **Interactive States**: Use group/group-hover for complex interactions
- **Dark Mode**: Consistent dark: variant implementation throughout
- **Responsive Design**: Mobile-first with deliberate breakpoints

## Performance Optimizations
- **Memoization**: React.memo() for expensive components
- **Handler References**: useCallback() for memoized child component handlers
- **Computed Values**: useMemo() for calculations, transformations
- **Non-Blocking UI**: useTransition() for large dataset updates
- **List Keys**: Never use array indices as keys
- **Memory Management**: Clean up subscriptions, timers, resources

## State Management
- **Component State**: Use local state for component-specific UI
- **Context Usage**: Limit to theme, auth, global preferences only
- **Complex Logic**: useReducer with action creators for predictability
- **Form State**: React Hook Form to minimize rerenders
- **Normalization**: Flat state structures, avoid nested objects

## Render Optimizations
- **DOM Operations**: Batch reads then writes to prevent thrashing
- **Animation Performance**: CSS transforms over top/left positioning
- **Property Hinting**: will-change for elements that animate
- **Off-Screen Content**: content-visibility: auto for large pages
- **Event Handlers**: Debounce resize, throttle scroll events

## Three.js Best Practices
- **Instance Rendering**: Use instancing for multiple neural nodes
- **Memory Management**: Dispose geometries, materials, textures
- **WebGL Optimization**: Custom shaders for neural glow effects
- **Progressive Loading**: Incremental data visualization for large datasets
- **Performance Tuning**: Frame rate limiting, precompute geometries

## Common Anti-Patterns
- **Effect Misuse**: Never use useEffect as event handler
- **Hook Conditions**: Don't wrap hooks in conditionals
- **Dependency Arrays**: Avoid object references in dependencies
- **State Mutations**: Never mutate state directly, use setters
- **Context Overuse**: Avoid wrapping entire app in multiple contexts
- **Nested Ternaries**: Use component extraction instead

## Reference Documentation
- **Implementation Details**: See `/frontend/docs/` for comprehensive guidance
- **Tailwind Integration**: Check `/frontend/docs/tailwind-module-system-integration.md`
- **Brain Visualization**: Refer to docs for Three.js integration best practices
