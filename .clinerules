# Novamind Digital Twin: Psychiatric Platform Architecture

## Module System (STRICT)

- **ESM Only**: Package.json has `"type": "module"` - ALL code must follow
- **TypeScript Only**: No JavaScript files permitted anywhere in codebase
- **No CommonJS**: Never use require()/module.exports in application code
- **Config Exception**: Only PostCSS/Tailwind use .cjs with CommonJS syntax
- **Path Resolution**: Always use path aliases (@domain/...) not relative paths
- **Module Boundary**: .cjs files never import app code, app never imports CommonJS
- **Stay In /frontend/**: Never modify anything outside frontend directory

## File Types

| Type | System | Extension | Rule |
|------|--------|-----------|------|
| App Code | ESM | .ts/.tsx | import/export only |
| Tests | ESM | .ts/.tsx | import/export only |
| Tailwind | CommonJS | .cjs | module.exports only |
| PostCSS | CommonJS | .cjs | module.exports only |
| Vite Config | ESM | .ts | export default |

## Clean Architecture

- **Domain**: Pure business logic, no framework dependencies
- **Application**: Use cases, services, state management
- **Infrastructure**: External services, API clients, databases
- **Presentation**: UI components, 3D visualization

## Component Design

- **Atomic Design**: atoms → molecules → organisms → templates → pages
- **Separation**: Container/presentation pattern for data/UI separation
- **Performance**: React.memo, useCallback, useMemo for expensive operations
- **Virtualization**: react-window for large lists/tables
- **Lazy Loading**: React.lazy() for all brain visualization components

## 3D Visualization Excellence

- **Three.js**: Use instancing for neural nodes, dispose resources
- **WebGL**: Shader optimizations for neural effects
- **Progressive**: Load data incrementally for large datasets
- **Precomputation**: Transform complex data outside render cycles
- **Cleanup**: Always dispose geometries/materials/textures

## HIPAA Compliance

- **No PHI in URLs**: POST only for sensitive data
- **Secure Storage**: No PHI in localStorage/sessionStorage
- **Auto-Logout**: Implement timeouts for inactive sessions
- **Audit Logging**: Track all data access in compliance with regulations
- **Error Handling**: No PHI in logs/error messages

## State Management

- **Context API**: Only for global theme, auth, preferences
- **Local State**: Prefer for UI-specific states
- **Reducer Pattern**: For complex state logic
- **Form State**: React Hook Form for performance
- **No Deep Nesting**: Keep state normalized, avoid duplication

## Reference Documentation

- **Comprehensive Docs**: Refer to `/frontend/docs/` for detailed implementation guides
- **Refactoring Plan**: `/frontend/docs/frontend-refactoring-plan.md` contains the master plan
- **Module System**: See `/frontend/docs/module-system-guidelines.md` for detailed rules
