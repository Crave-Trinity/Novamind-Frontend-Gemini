# Novamind Digital Twin: Concierge Psychiatry Platform
# NOVAMIND TESTING REQUIREMENTS: /FRONTEND/TESTING-REQUIREMENTS.MD
## Full-Stack Architecture (Backend + Frontend)

### Clean Architecture Across the Stack

- **Domain Layer**: Pure business logic, no framework dependencies
- **Application Layer**: Use cases, services, state management
- **Presentation Layer**: UI components (React) and API endpoints (FastAPI)
- **Infrastructure Layer**: External services, database, API clients

### Component Integration

- **Backend-Frontend Contracts**: Strong typing for API requests/responses
- **Digital Twin Model**: Seamless data flow between brain visualization and ML models
- **Event-Driven Communication**: Use Observer pattern for cross-component notification

## Frontend Specific Guidelines

### React Component Architecture

- **Atomic Design Pattern**: atoms → molecules → organisms → templates → pages
- **Container/Presentation Pattern**: Separate data-fetching from UI rendering
- **Single Responsibility Principle**: Every component has one clear purpose
- **Code Splitting**: Use React.lazy() for expensive visualization components
- **Error Boundaries**: Implement at strategic points for graceful failures

### TypeScript Best Practices

- **Strict Type Checking**: Enable strictNullChecks and noImplicitAny
- **Explicit Interfaces**: Define interfaces for all component props, API responses
- **Discriminated Unions**: Use for state management with reducers
- **Type Guards**: Implement for complex data structures and API responses

### Performance Optimizations

- **Memoization**: Use React.memo() for expensive components
- **Callback References**: useCallback() for event handlers
- **Computed Values**: useMemo() for data transformations
- **Virtualization**: Use windowing (react-window) for large lists or tables
- **Suspense & Concurrent Mode**: Implement for smoother user experience

### Data Visualization Excellence

- **Three.js Best Practices**: Use instancing for neural nodes, dispose geometries
- **WebGL Optimizations**: Optimize shaders for brain visualization effects
- **Progressive Loading**: Implement for large datasets in visualizations
- **Precomputation**: Transform complex data outside render cycles

### State Management

- **React Context API**: Use for global theme, auth, and preferences only
- **Local Component State**: Prefer for UI-specific states
- **useReducer Pattern**: Implement for complex state logic
- **Form State**: Use React Hook Form for performance and validation
- **Query Caching**: Implement for API data with proper invalidation

### Styling with Tailwind

- **Custom Theme**: Extend Tailwind for our luxury aesthetic
- **Component Abstractions**: Extract common patterns to components
- **Dark Mode Support**: Consistent dark: variant implementation
- **Responsive Design**: Mobile-first with deliberate breakpoints
- **Accessibility**: Ensure proper contrast, focus states, and ARIA attributes

### HIPAA Compliance in Frontend

- **No PHI in URLs**: Use POST for sensitive data, never GET params
- **Secure Storage**: No PHI in localStorage or sessionStorage
- **Auto-Logout**: Implement timeouts for inactive sessions
- **Secure Forms**: Validate and sanitize inputs, prevent XSS
- **Audit Logging**: Track all data access in compliance with HIPAA

### API Integration

- **Typed API Clients**: Strong typing for all API interactions
- **Error Handling**: Graceful degradation for API failures
- **Loading States**: Consistent loading indicators across the application
- **Retry Logic**: Implement with exponential backoff
- **Request Batching**: Combine related requests where appropriate

## Backend Guidelines (FastAPI)

### Domain Layer

- Zero references to FastAPI, AWS, or external frameworks
- Patient, Appointment, Digital Twin, and Treatment models here
- Clinical logic for risk assessment, outcomes, and predictions

### Data Layer

- Repository Pattern for data access
- ORM models separate from domain entities
- Efficient database queries with proper indexing

### Presentation Layer (API)

- Pydantic v2 schemas for request/response validation
- FastAPI Depends() for dependency injection
- Comprehensive OpenAPI documentation

### Security & HIPAA

- Authentication & role-based access control
- AWS Cognito integration with MFA
- JWT token validation for all protected endpoints
- PHI exclusion from logs and error messages

## Integration Points

### XGBoost ML Service

- Real-time risk prediction integration
- Treatment response forecasting
- Digital brain model data exchange
- Feature importance visualization

### DigitalTwin Integration

- Bidirectional data flow with 3D brain visualization
- Dynamic region highlighting based on ML predictions
- Temporal modeling of treatment effects
- Patient-specific neural network modeling

### MentalLLaMA Integration

- Context-aware patient data analysis
- Natural language processing for notes and assessments
- Semantic search across patient history
- Clinical decision support with explainable AI

## Testing & Quality

### Frontend Testing

- React Testing Library for component tests
- Cypress for E2E testing
- Storybook for component documentation
- Accessibility testing (axe-core)

### Backend Testing

- Pytest with explicit coverage
- Mock external dependencies
- Integration tests for API endpoints
- Security boundary testing

## Luxury Concierge Experience

- **Seamless UX**: Fluid transitions, optimistic updates
- **Aesthetic Excellence**: Consistent, premium visual language
- **Performance**: Near-instant responses for critical functions
- **Personalization**: Tailored experience for each provider and patient
- **Trust Signals**: Clear security indicators throughout the interface
